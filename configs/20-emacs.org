#+title: Emacs
#+author: Gábor Udvari

* Emacs config

The early-init.el file contains early configurations which do not need any extra packages.

#+BEGIN_SRC text :noweb yes :exports none :mkdirp yes :tangle home/.config/emacs/early-init.el
  <<emacs-early>>
#+END_SRC

The Emacs configurations will go into the init.el file.

#+BEGIN_SRC text :noweb yes :exports none :mkdirp yes :tangle home/.config/emacs/init.el
  <<emacs>>
#+END_SRC

The different emacs packages will be installed through Guix home, therefore we will add all the packages to the guix home configuration as well.

#+BEGIN_SRC scheme :noweb-ref guix-home
  (use-modules (gnu packages emacs))
  (use-modules (gnu packages emacs-xyz))

  (define %home-packages
    (append %home-packages
            (list emacs-pgtk)))
#+END_SRC

** early-init.el

#+BEGIN_SRC elisp :noweb-ref emacs-early
  (setq inhibit-startup-screen t ;; Disable startup screen
        inhibit-startup-message t ;; Disable startup message
        inhibit-startup-echo-area-message t ;; Disable startup message

        initial-scratch-message nil ;; No message in scratch buffer
        initial-buffer-choice nil ;; Initial buffer

        ;; frame-title-format nil ;; No frame title

        use-file-dialog nil ;; No file dialog
        use-dialog-box nil ;; No dialog box

        cursor-in-non-selected-windows nil) ;; Disable cursor in inactive windows)

  (setq byte-compile-warnings '(not obsolete)
        warning-suppress-log-types '((comp) (bytecomp)))

  ;; Save the original GC, file handler, VC handled backends values
  ;; set them to nil now, and restore them in an emacs-startup-hook.
  ;; This is taken from Prot's config, it should decrease startup time.
  (defvar my-gc-cons-threshold gc-cons-threshold)
  (setq gc-cons-threshold most-positive-fixnum)

  (defvar my-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)

  (defvar my-vc-handled-backends vc-handled-backends)
  (setq vc-handled-backends '(Git))

  ;; Windows accented usernames cause issues, maybe this helps?
  (set-language-environment "UTF-8")

  ;; Do not resize Emacs to column size
  (setq frame-inhibit-implied-resize t)

  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold my-gc-cons-threshold
                    file-name-handler-alist my-file-name-handler-alist
                    vc-handled-backends my-vc-handled-backends)))

  ;; Initialize package from cache
  (setq package-enable-at-startup t)

  ;; Avoid white background because we use a dark theme by default
  (setq mode-line-format nil)
  ;; (set-face-attribute 'default nil :background "#000000" :foreground "#ffffff")
  ;; (set-face-attribute 'mode-line nil :background "#000000" :foreground "#ffffff" :box 'unspecified)

  ;; Function for re-enabling the theme background, as taken
  ;; from Prot's config.
  (defun my-re-enable-frame-theme (_frame)
    (when-let ((theme (car custom-enabled-themes)))
      (enable-theme theme)))

  (add-hook 'after-make-frame-functions #'my-re-enable-frame-theme)

  (add-hook 'after-init-hook (lambda () (set-frame-name "home")))
#+END_SRC

** Defaults

Change some of the defaults to make a more minimal interface.

#+begin_src elisp :noweb-ref emacs
  ;; Setup customization file
  (setq custom-file (make-temp-file "emacs-custom-"))
  ;; Never load it
  ;; (load custom-file)

  ;; Prevent default.el to be run
  (setq inhibit-default-init t)

  ;; Automatically revert buffers
  (global-auto-revert-mode 1)

  ;; Support for colors in the compilation buffer
  (add-hook 'compilation-filter-hook 'ansi-color-compilation-filter)

  ;; Set the compilation buffer to auto scroll
  (setq compilation-scroll-output 1)

  ;; Change the default dir on Windows
  (if (eq system-type 'windows-nt)
      (progn
        ;; Note: the ~/ gets to be assigned to the HOME environment variable,
        ;; you need to set that one outside of Emacs
        (cd (expand-file-name (concat (getenv "HOMEPATH") "/")))
        (setq default-directory (expand-file-name (concat (getenv "HOMEPATH") "/")))
        (setq server-auth-dir (expand-file-name (concat (getenv "HOMEPATH") "/.config/emacs/server/")))))

  ;; Load all lisp files from the init.d folder
  (if (eq system-type 'windows-nt)
      (mapc 'load (file-expand-wildcards (expand-file-name (concat (getenv "HOMEPATH") "/.config/emacs/init.d/*.el"))))
    (mapc 'load (file-expand-wildcards "~/.config/emacs/init.d/*.el")))

  (setq use-short-answers t) ;; y/n for answering yes/no questions

  ;; Make native compilation silent and prune its cache.
  (when (native-comp-available-p)
    (setq native-comp-async-report-warnings-errors 'silent) ; Emacs 28 with native compilation
    (setq native-compile-prune-cache t)) ; Emacs 29

  (setq-default indent-tabs-mode nil) ;; No tabs
  (setq-default tab-width 2) ;; 2 spaces as tabs

  ;; Resize frames based on the pixel size
  (setq frame-resize-pixelwise t)
  ;; Do not resize windows based on pixelwise, it may cause crashing
  (setq window-resize-pixelwise nil)
  (setq resize-mini-windows 'grow-only)

  ;; Faster scroll, but inaccurate syntax highlighting
  (setq fast-but-imprecise-scrolling t)

  ;; Move point to top/bottom of buffer before signaling a scrolling error.
  (setq scroll-error-top-bottom t)

  ;; Keeps screen position if the scroll command moved it vertically out of the
  ;; window.
  (setq scroll-preserve-screen-position t)

  ;; Move through windows with Ctrl-<arrow keys>
  (windmove-default-keybindings 'control)

  ;; Buffer encoding
  (prefer-coding-system                    'utf-8-unix)
  (set-default-coding-systems              'utf-8-unix)
  (set-terminal-coding-system              'utf-8-unix)
  (set-keyboard-coding-system              'utf-8-unix)
  (setq-default buffer-file-coding-system  'utf-8-unix)

  ;; Fix archaic defaults
  (setopt sentence-end-double-space nil)

  ;; Unique buffer names
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'reverse
        uniquify-separator " • "
        uniquify-after-kill-buffer-p t
        uniquify-ignore-buffers-re "^\\*")

  (setq default-major-mode 'text-mode) ;; Default major mode

  ;; Configure Ediff to use a single frame and split windows horizontally
  (setq ediff-window-setup-function #'ediff-setup-windows-plain
        ediff-split-window-function #'split-window-horizontally)

  ;; Configure SHR images to be smaller (eg. in Elfeed)
  (setq shr-max-image-proportion 0.6)
#+end_src

** Simpler UI

As seen on https://www.youtube.com/watch?v=74zOY-vgkyw, and from the nano-defaults.el:

#+BEGIN_SRC elisp :noweb-ref emacs
  (menu-bar-mode -1) ;; Disable menubar
  (tooltip-mode -1) ;; Disable tooltips
  (when (display-graphic-p)
    (set-fringe-mode 10) ;; Give some breathing room
    (tool-bar-mode -1) ;; Disable the toolbar
    ;; (scroll-bar-mode -1) ;; Disable visible scrollbar
  )

  (setq indicate-empty-lines nil) ;; No empty line indicators
    (setq font-lock-maximum-decoration nil) ;; Moderate font lock
    (setq font-lock-maximum-size nil) ;; No limit on font lock

    (setq fill-column 80) ;; Fill column at 80
    (global-visual-line-mode 1) ;; Do line wrapping everywhere

    (setq visible-bell t) ;; Enable visible bell

    ;; Size of temporary buffers
    (temp-buffer-resize-mode)
    (setq temp-buffer-max-height 8)

    ;; Minimum window height
    (setq window-min-height 1)
#+END_SRC

** Package handling

Enable packages and use-package in all cases regardless of version (I use at least Emacs 29 everywhere) or OS.

#+BEGIN_SRC elisp :noweb-ref emacs
  (require 'package)
  (eval-when-compile
    (require 'use-package))
#+END_SRC

Packages should not be ensured when Guix is available, but useful otherwise.

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (package-installed-p 'quelpa)
    (package-vc-install "https://github.com/quelpa/quelpa")

    ;; This is the officialy recommended way to bootstrap quelpa, but the
    ;; raw.githubusercontent.com domain might be prohibited
    ; (with-temp-buffer
    ;   (url-insert-file-contents "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
    ;   (eval-buffer)
    ;  (quelpa-self-upgrade)))
    )
#+END_SRC

** No littering

*** Installation

If Guix is not installed, then install within Emacs with Quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(compat
       :fetcher github
       :repo "emacs-compat/compat"))
    (quelpa
     '(no-littering
       :fetcher github
       :repo "emacscollective/no-littering")))
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-no-littering)))
#+END_SRC

*** Config

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Configure no-littering
  (use-package no-littering
    :init
    ;; Move auto-save files to var
    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
    ;; Store custom-file in etc
    (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
    (load custom-file 'noerror 'nomessage)
    ;; Enable no-littering to configure auto-save, backup, etc.
    (no-littering-theme-backups)
    )
#+END_SRC

** Fonts

*** Config

Do not use any packages for this, just the built-in ~set-face-attribute~.

#+BEGIN_SRC elisp :noweb-ref emacs
  (defun apply-fonts (variable-font fixed-font)
    (progn (let ((font fixed-font))
               (if (member font (font-family-list))
                   (progn (set-face-attribute 'default nil :font font :height 100)
                          (set-face-attribute 'fixed-pitch nil :font font :height 100))))
             (let ((font variable-font))
               (if (member font (font-family-list))
                   (progn (set-face-attribute 'mode-line nil :font font :height 120)
                          (set-face-attribute 'variable-pitch nil :font font :height 120))))))
#+END_SRC

We set separate fonts on Windows and where Guix is available, because Guix can install our custom fonts, but [[https://github.com/microsoft/terminal/issues/3257][Windows currently has issues]] with user installed fonts. Use Calibri and Cascadia Mono on Windows and use Cantarell and Fira Code where Guix is available:

#+BEGIN_SRC elisp :noweb-ref emacs
  (defun my-fonts ()
    (cond ((eq system-type 'windows-nt) (apply-fonts "Calibri" "Cascadia Mono"))
          ((executable-find "guix") (apply-fonts "Cantarell" "Fira Code"))))
#+END_SRC

#+BEGIN_SRC elisp :noweb-ref emacs
  (my-fonts)
  (add-hook 'server-after-make-frame-hook #'my-fonts)
#+END_SRC

** Modus themes

*** Installation

The themes modus-operandi and modus-vivendi are part of Emacs since version 28. No need for installation.

*** Config

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Make customisations that affect Emacs faces BEFORE loading a theme
  ;; (any change needs a theme re-load to take effect).
  (use-package emacs
    :init
    ;; If you like two specific themes and want to switch between them, you
    ;; can specify them in `modus-themes-to-toggle' and then invoke the command
    ;; `modus-themes-toggle'.  All the themes are included in the variable
    ;; `modus-themes-collection'.
    (setq modus-themes-to-toggle '(modus-operandi modus-vivendi))

    ;; Set org blocks background
    (setq modus-themes-org-blocks 'gray-background) ; {nil,'gray-background,'tinted-background}

    (setq modus-themes-headings ; read the manual's entry or the doc string
          '((0 variable-pitch light 1.9)
            (1 variable-pitch light 1.8)
            (2 variable-pitch regular 1.7)
            (3 variable-pitch regular 1.6)
            (4 variable-pitch regular 1.5)
            (5 variable-pitch 1.4) ; absence of weight means `bold'
            (6 variable-pitch 1.3)
            (7 variable-pitch 1.2)
            (t variable-pitch 1.1)))

    ;; They are nil by default...
    (setq modus-themes-mixed-fonts t
          modus-themes-variable-pitch-ui t)

    ;; Configure modeline
    (setq modus-themes-mode-line '(accented borderless 4 0.9))

    ;; Add background for fringe area
    (setq modus-themes-fringes 'subtle)

    ;; Read the doc string or manual for this one.  The symbols can be
    ;; combined in any order.
    (setq modus-themes-region '(intense no-extend neutral))

    ;; Disable all other themes to avoid awkward blending:
    (mapc #'disable-theme custom-enabled-themes)

    :config
    ;; We use the built-in theme
    (load-theme 'modus-operandi)
    )
#+END_SRC

** Spacious padding

*** Installation

Install within Emacs using Quelpa, because it is not yet packaged into Guix:

#+BEGIN_SRC elisp :noweb-ref emacs
  (quelpa
   '(spacious-padding
     :fetcher github
     :repo "protesilaos/spacious-padding"))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package spacious-padding
    :config
    (setq spacious-padding-widths
      '( :internal-border-width 0
         :header-line-width 4
         :mode-line-width 6
         :tab-width 4
         :tab-bar-width 0
         :right-divider-width 30
         :scroll-bar-width 20
         :fringe-width 8))
    ;; Emacs server-client mode has an ugly black border, this fixes it
    (if (daemonp)
        (add-hook 'server-after-make-frame-hook (lambda () (spacious-padding-mode 1)))
        (spacious-padding-mode 1)))
#+END_SRC

** Line numbers

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package display-line-numbers
    :config
    ;; Set absolute line numbers.  A value of "relative" is also useful.
    (setq display-line-numbers-type t)

    ;; Enable line numbers for programming modes
    (add-hook 'prog-mode-hook (lambda () (display-line-numbers-mode 1))))
#+END_SRC

** svg-tag-mode

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(svg-lib
       :fetcher github
       :stable nil
       :repo "rougier/svg-lib"))
    (quelpa
     '(svg-tag-mode
       :fetcher github
       :stable nil
       :repo "rougier/svg-tag-mode"))
    )
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-svg-lib emacs-svg-tag-mode)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Same as example-2.el from svg-tag-mode
  (defconst date-re "[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}")
  (defconst time-re "[0-9]\\{2\\}:[0-9]\\{2\\}")
  (defconst day-re "[A-Za-z]\\{3\\}")
  (defconst day-time-re (format "\\(%s\\)? ?\\(%s\\)?" day-re time-re))

  (defun svg-progress-percent (value)
    (save-match-data
      (svg-image (svg-lib-concat
                  (svg-lib-progress-bar  (/ (string-to-number value) 100.0)
                                         nil :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                  (svg-lib-tag (concat value "%")
                               nil :stroke 0 :margin 0)) :ascent 'center)))

  (defun svg-progress-count (value)
    (save-match-data
      (let* ((seq (split-string value "/"))
             (count (if (stringp (car seq))
                        (float (string-to-number (car seq)))
                      0))
             (total (if (stringp (cadr seq))
                        (float (string-to-number (cadr seq)))
                      1000)))
        (svg-image (svg-lib-concat
                    (svg-lib-progress-bar (/ count total) nil
                                          :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                    (svg-lib-tag value nil
                                 :stroke 0 :margin 0)) :ascent 'center))))

  (use-package svg-tag-mode
    :init
    (setq svg-tag-tags
          `(
            ;; Org tags
            ; (":\\([A-Za-z0-9]+\\)" . ((lambda (tag) (svg-tag-make tag))))
            ; (":\\([A-Za-z0-9]+[ \-]\\)" . ((lambda (tag) tag)))

            ;; Task priority
            ("\\[#[A-Z]\\]" . ( (lambda (tag)
                                  (svg-tag-make tag :face 'org-priority
                                                :beg 2 :end -1 :margin 0))))

            ;; TODO / DONE
            ("TODO" . ((lambda (tag) (svg-tag-make "TODO" :face 'org-todo :inverse t :margin 0))))
            ("DONE" . ((lambda (tag) (svg-tag-make "DONE" :face 'org-done :margin 0))))


            ;; Citation of the form [cite:@Knuth:1984]
            ("\\(\\[cite:@[A-Za-z]+:\\)" . ((lambda (tag)
                                              (svg-tag-make tag
                                                            :inverse t
                                                            :beg 7 :end -1
                                                            :crop-right t))))
            ("\\[cite:@[A-Za-z]+:\\([0-9]+\\]\\)" . ((lambda (tag)
                                                       (svg-tag-make tag
                                                                     :end -1
                                                                     :crop-left t))))


            ;; Active date (with or without day name, with or without time)
            (,(format "\\(<%s>\\)" date-re) .
             ((lambda (tag)
                (svg-tag-make tag :beg 1 :end -1 :margin 0))))
            (,(format "\\(<%s \\)%s>" date-re day-time-re) .
             ((lambda (tag)
                (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0))))
            (,(format "<%s \\(%s>\\)" date-re day-time-re) .
             ((lambda (tag)
                (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0))))

            ;; Inactive date (with or without day name, with or without time)
            (,(format "\\(\\[%s\\]\\)" date-re) .
             ((lambda (tag)
                (svg-tag-make tag :beg 1 :end -1 :margin 0 :face 'org-date))))
            (,(format "\\(\\[%s \\)%s\\]" date-re day-time-re) .
             ((lambda (tag)
                (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0 :face 'org-date))))
            (,(format "\\[%s \\(%s\\]\\)" date-re day-time-re) .
             ((lambda (tag)
                (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0 :face 'org-date))))

            ;; Progress
            ("\\(\\[[0-9]\\{1,3\\}%\\]\\)" . ((lambda (tag)
                                                (svg-progress-percent (substring tag 1 -2)))))
            ("\\(\\[[0-9]+/[0-9]+\\]\\)" . ((lambda (tag)
                                              (svg-progress-count (substring tag 1 -1)))))
            ))
    :hook (;(prog-mode . svg-tag-mode)
           (org-mode . svg-tag-mode))
    )
#+END_SRC

** Dired

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package dired
    :config
    (setq dired-kill-when-opening-new-dired-buffer 1))
#+END_SRC

** Which key

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(which-key
       :fetcher github
       :repo "justbur/emacs-which-key")))
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-which-key)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package which-key
    :init
    (which-key-mode)
    )
#+END_SRC

** Exec path from shell

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(exec-path-from-shell
       :fetcher github
       :repo "purcell/exec-path-from-shell")))
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-exec-path-from-shell)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package exec-path-from-shell
    :init
    ;; TODO: there is something breaking Emacs if an interactive shell is used, only do a login shell
    (setq exec-path-from-shell-arguments (list "-l"))
    ;; There is an issue setting variables on Windows, set the shell variables depending on the OS
    (if (eq system-type 'windows-nt)
        (setq exec-path-from-shell-variables nil)
      (setq exec-path-from-shell-variables '("PATH" "SSH_AUTH_SOCK" "SSH_AGENT_PID")))
    :config
    (exec-path-from-shell-initialize)
    )
#+END_SRC

** Vertico

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(vertico
       :fetcher github
       :repo "minad/vertico")))
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-vertico)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Configure vertico
  (use-package vertico
    :init
    (vertico-mode)
    (setq enable-recursive-minibuffers t))
#+END_SRC

** Orderless

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(orderless
       :fetcher github
       :repo "oantolin/orderless")))
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-orderless)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+END_SRC

** Syntax checking

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(flycheck
       :fetcher github
       :repo "flycheck/flycheck"
       :files (:defaults
             "flycheck-readme.txt"))))
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-flycheck)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package flycheck
    :init (global-flycheck-mode))
#+END_SRC

** Spell checking

*** Installation

Flyspell is part of Emacs, no need to install the Emacs package separately.

Add the language file Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (use-modules (gnu packages hunspell))
  
  (define %home-packages
    (append %home-packages
            (list hunspell
                  hunspell-dict-hu
                  hunspell-dict-en)))
#+END_SRC

If you are not on Guix you can download the dictionaries from the LibreOffice repository:

https://cgit.freedesktop.org/libreoffice/dictionaries/tree

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package flyspell
    :init
    ;; Configure hunspell
    (setq ispell-program-name "hunspell")
    (setq ispell-hunspell-dict-paths-alist
          '(("hu_HU" (concat (if (eq system-type 'windows-nt) (getenv "USERPROFILE") "~") (if (executable-find "guix") "/.guix-home/profile" "/.local") "/share/hunspell/hu_HU.aff"))
            ("en_US" (concat (if (eq system-type 'windows-nt) (getenv "USERPROFILE") "~") (if (executable-find "guix") "/.guix-home/profile" "/.local") "/share/hunspell/en_US.aff"))
            ))
    (setq ispell-local-dictionary-alist
          '(("Hungarian" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "hu_HU") nil utf-8)
            ("English"   "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
            ))
    )
#+END_SRC

** Pass

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(pass
       :fetcher github
       :repo "NicolasPetton/pass")))
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (use-modules (gnu packages password-utils))

  (define %home-packages
    (append %home-packages
            (list emacs-pass
                  password-store)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package pass)
#+END_SRC

** Org mode

*** Installation

Org is bundled inside Emacs, so only need to install some extra packages, like emacs-org-modern and emacs-org-contrib.

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(org-contrib
       :fetcher github
       :repo "emacsmirror/org-contrib"
       :stable nil
       :files (:defaults
               "lisp")))
    (quelpa
     '(org-modern
       :fetcher github
       :repo "minad/org-modern")))
#+END_SRC

The package org-margin is not yet packaged for Guix, always install with quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (quelpa
   '(org-margin
     :fetcher github
     :repo "rougier/org-margin"))
#+END_SRC

Add the Guix packages to the home config:

#+begin_src scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-org-modern
                  emacs-org-contrib
                  emacs-org-texlive-collection)))
#+end_src

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (defun myhooks/org-mode-setup ()
    ;; Disable org-indent-mode because it causes empty background
    ;; for source blocks when the lines are too long
    (org-indent-mode -1)
    (variable-pitch-mode 1)
    (setq visual-line-fringe-indicators t)
    (visual-line-mode 1))

  (defun myhooks/org-font-setup ()
    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.3)
                    (org-level-2 . 1.25)
                    (org-level-3 . 1.2)
                    (org-level-4 . 1.1)
                    (org-level-5 . 1.05)
                    (org-level-6 . 1.05)
                    (org-level-7 . 1.05)
                    (org-level-8 . 1.05)))
      (set-face-attribute (car face) nil :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

  (use-package org
    :hook (org-mode . myhooks/org-mode-setup)
    :hook (org-mode . myhooks/org-font-setup)
    :init
    (setq org-ellipsis "…")  ; Calibri also needs to support this
    (setq org-hide-leading-stars nil)  ; Hide leading stars
    (setq org-src-fontify-natively t)

    ;; Active Babel languages
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((shell . t)
       (sql . t))))

  (use-package org-agenda
    :init
    (if (eq system-type 'windows-nt)
        (defvar my-notes-folder (concat (getenv "HOMEPATH") "/Notes/"))
      (defvar my-notes-folder (concat (getenv "HOME") "/Notes/")))
    (when (file-exists-p my-notes-folder)
      (setq org-agenda-files (directory-files-recursively my-notes-folder "\\.org$"))))

  (use-package org-tempo)
  (use-package org-contrib)

  (use-package ox-beamer)
  (use-package ox-latex
    :init
    (setq latex-run-command "xelatex"))

  (use-package ox-md)
  (use-package ox-confluence)

  (use-package org-modern
    :after org
    :config
    ;; Disable fringe, because Olivetti will move it to the left
    ;; and it looks ugly:
    (setq org-modern-block-fringe nil)
    ;; Disable org-modern-star, titles will be styled by the org-margin package
    (setq org-modern-star nil)
    ;; Disable a few org-modern stylings, where svg-tag-mode is better
    (setq org-modern-timestamp nil
          org-modern-priority nil
          org-modern-todo nil
          org-modern-tag nil
          org-modern-progress nil)
    (with-eval-after-load 'org (global-org-modern-mode)))

  (use-package org-margin
    :after org
    :hook (org-mode . org-margin-mode))
#+END_SRC

** Htmlize

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(htmlize
       :fetcher github
       :repo "hniksic/emacs-htmlize")))
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-htmlize)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package htmlize)
#+END_SRC

** PlantUML mode

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(plantuml-mode
       :fetcher github
       :repo "skuro/plantuml-mode")))
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-plantuml-mode)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package plantuml-mode
    :init
    ;; Set the execution mode to server
    (setq plantuml-default-exec-mode 'server)
    ;; Add support for org source blocks
    (add-to-list
     'org-src-lang-modes '("plantuml" . plantuml))
    )
#+END_SRC

** Engrave-faces

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(engrave-faces
       :fetcher github
       :repo "tecosaur/engrave-faces")))
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-engrave-faces)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package engrave-faces
    :init
    (setq org-latex-src-block-backend 'engraved))
#+END_SRC

** PHP mode

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(php-mode
       :fetcher github
       :repo "emacs-php/php-mode")))
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-php-mode)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package php-mode
    :config
    (setq php-mode-coding-style 'psr2))
#+END_SRC

** Paredit

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(paredit
       :fetcher github
       :repo "emacsmirror/paredit")))
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-paredit)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package paredit
    :commands (enable-paredit-mode)
    :hook ((emacs-lisp-mode . enable-paredit-mode)
           (eval-expression-minibuffer-setup . enable-paredit-mode)
           (ielm-mode . enable-paredit-mode)
           (lisp-mode . enable-paredit-mode)
           (lisp-interaction-mode . enable-paredit-mode)
           (scheme-mode . enable-paredit-mode)
           (slime-repl-mode . enable-paredit-mode)
           (clojure-mode . enable-paredit-mode)
           (clojurescript-mode . enable-paredit-mode)
           (cider-repl-mode . enable-paredit-mode)
           (cider-mode . enable-paredit-mode)
           (clojure-mode . enable-paredit-mode))
    :config
    (show-paren-mode t)

    :bind (("C->" . paredit-forward-slurp-sexp)
           ("C-<" . paredit-forward-barf-sexp)
           ("C-M-<" . paredit-backward-slurp-sexp)
           ("C-M->" . paredit-backward-barf-sexp)
           ("<C-right>" .  nil)
           ("<C-left>" .  nil)
           ("M-[" . paredit-wrap-square)
           ("M-{" . paredit-wrap-curly))

    ;; :after (autoload 'enable-paredit-mode "paredit" "Turn on
    ;; pseudo-structural editing of Lisp code." t)
    )
#+END_SRC

** Geiser

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+begin_src elisp :noweb-ref emacs
  (unless (or (eq system-type 'windows-nt) (executable-find "guix"))
    (quelpa
     '(geiser
       :fetcher github
       :repo "emacsmirror/geiser"
       :files (:defaults
               "elisp")))
    (quelpa
     '(geiser-guile
       :fetcher github
       :repo "emacsmirror/geiser-guile"
       :files (:defaults
               "src"))))
#+end_src

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-geiser
                  emacs-geiser-guile)))
#+END_SRC

*** Configuration

#+begin_src elisp :noweb-ref emacs
  (use-package geiser-guile
    :unless (eq system-type 'windows-nt)
    :load-path (lambda () (file-name-concat (package-desc-dir (package-get-descriptor 'geiser))
                                            "elisp")))
#+end_src

** Markdown mode

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(markdown-mode
       :fetcher github
       :repo "jrblevin/markdown-mode"))
    )
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-markdown-mode)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (defun myhooks/markdown-mode-setup ()
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (defun myhooks/markdown-font-setup ()
    ;; Set faces for heading levels
    (dolist (face '((markdown-header-face-1 . 1.2)
                    (markdown-header-face-2 . 1.1)
                    (markdown-header-face-3 . 1.05)
                    (markdown-header-face-4 . 1.0)
                    (markdown-header-face-5 . 1.1)
                    (markdown-header-face-6 . 1.1)
                    (markdown-markup-face . 1.0)
                    ))
      (set-face-attribute (car face) nil :height (cdr face)))
    )

  (use-package markdown-mode
    :init
    (add-to-list 'auto-mode-alist
                 '("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . markdown-mode))

    (autoload 'gfm-mode "markdown-mode"
      "Major mode for editing GitHub Flavored Markdown files" t)
    (add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))

    (add-hook 'markdown-mode-hook #'myhooks/markdown-font-setup)
    (add-hook 'markdown-mode-hook #'myhooks/markdown-mode-setup)
    (add-hook 'markdown-mode-hook #'myhooks/visual-fill)
    )
#+END_SRC

** YAML mode

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(yaml-mode
       :fetcher github
       :repo "yoshiki/yaml-mode"))
    )
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-yaml-mode)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package yaml-mode
    :init
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
    )
#+END_SRC

** Dockerfile mode

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(dockerfile-mode
       :fetcher github
       :repo "spotify/dockerfile-mode"))
    )
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-dockerfile-mode)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package dockerfile-mode
    :mode ("Dockerfile" . dockerfile-mode))
#+END_SRC

** PDF Tools

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(pdf-tools
       :fetcher github
       :repo "vedang/pdf-tools"))
    )
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-pdf-tools)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package pdf-tools
    :magic ("%PDF" . pdf-view-mode)
    :config (pdf-loader-install)
    )
#+END_SRC

** Elfeed

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+begin_src elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(elfeed
       :fetcher github
       :repo "skeeto/elfeed"))
    )
#+end_src

Add the Guix packages to the home config:

#+begin_src scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-elfeed)))
#+end_src

*** Configuration

#+begin_src elisp :noweb-ref emacs
  (use-package elfeed
    :init
    (setq elfeed-feeds
      '(("https://xkcd.com/rss.xml" webcomic)
        ("https://planet.emacslife.com/atom.xml" emacs)
        ("https://telex.hu/rss" hungary news)
        ("https://24.hu/feed" hungary news)
        ("https://444.hu/feed" hungary news)
        ("https://www.phoronix.com/rss.php" open-source news)
        ("https://www.met.hu/methu/rss/rss.php" hungary news weather)
        ("https://www.freakingpenguin.com/feed.xml" guix guile))))

  ;; https://lospec.com/ygloof
  ;; https://x.com/cyangmou
#+end_src

** Elfeed Tube

*** Installation

The package is not yet packed for Guix, install it using Quelpa:

#+begin_src elisp :noweb-ref emacs
  (quelpa
   '(elfeed-tube
     :fetcher github
     :repo "karthink/elfeed-tube"))
#+end_src

*** Configuration

#+begin_src elisp :noweb-ref emacs
  (use-package elfeed-tube
    :after elfeed
    :config
    (elfeed-tube-setup)

    :bind (:map elfeed-show-mode-map
           ("F" . elfeed-tube-fetch)
           ([remap save-buffer] . elfeed-tube-save)
           :map elfeed-search-mode-map
           ("F" . elfeed-tube-fetch)
           ([remap save-buffer] . elfeed-tube-save)))
#+end_src

** Persist

This is a depencency for Mastodon, the manual install is only required if there is no guix.

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+begin_src elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(persist
       :fetcher github
       :repo "emacsmirror/persist")))
#+end_src

** Mastodon.el

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+begin_src elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(mastodon
       :fetcher git
       :url "https://codeberg.org/martianh/mastodon.el")))
#+end_src

Add the Guix packages to the home config:

#+begin_src scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-mastodon)))
#+end_src

*** Configuration

#+begin_src elisp :noweb-ref emacs
  (use-package mastodon
    :init
    (setq mastodon-instance-url "https://fosstodon.org"
          mastodon-active-user "gaborudvari"))
#+end_src

** Mastodon Alt

*** Installation

The Emacs package is not yet packaged into guix, install it with Quelpa:

#+begin_src elisp :noweb-ref emacs
  (quelpa
   '(mastodon-alt
     :fetcher github
     :stable nil
     :repo "rougier/mastodon-alt"))
#+end_src

*** Configuration

There is some issue with using mastodon-alt, not sure why, do not enable it until I figure it out.

#+begin_src elisp :noweb-ref emacs
  ;; (use-package mastodon-alt
  ;;   :config
  ;;   (mastodon-alt-tl-deactivate))
#+end_src

** EMMS

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(emms-setup
       :fetcher github
       :repo "emacsmirror/emms"))
    )
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (use-modules (gnu packages video))

  (define %home-packages
    (append %home-packages
            (list emacs-emms
                  mpv)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package emms-setup
    :init
    (setq emms-player-list '(emms-player-mpv)
          emms-info-functions '(emms-info-native))
    :config
    (emms-all)
    )
#+END_SRC

** Bluetooth

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+begin_src elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(bluetooth
       :fetcher github
       :repo "emacsmirror/bluetooth")))
#+end_src

Add the Guix packages to the home config:

#+begin_src scheme :noweb-ref guix-home
  (use-modules (gnu packages emacs-xyz))

  (define %home-packages
    (append %home-packages
            (list emacs-bluetooth)))
#+end_src

*** Configuration

#+begin_src elisp :noweb-ref emacs
  (use-package bluetooth
    :init
    (setq bluetooth-bluez-bus :system))
#+end_src

** Tramp

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package tramp
    :config
    ;; Based on tramp-sh.el https://git.savannah.gnu.org/cgit/tramp.git/tree/lisp/tramp-sh.el
    (add-to-list 'tramp-methods
                 '("mysudo"
                   (tramp-login-program        "env")
                   (tramp-login-args           (("SUDO_PROMPT=P\"\"a\"\"s\"\"s\"\"w\"\"o\"\"r\"\"d\"\":")
                                                ("sudo") ("su") ("-") ("%u") ))
                   (tramp-remote-shell         "/bin/sh")
                   (tramp-remote-shell-login   ("-l"))
                   (tramp-remote-shell-args    ("-c"))
                   (tramp-connection-timeout   10)
                   (tramp-session-timeout      300)
                   (tramp-password-previous-hop t)))
    )
#+END_SRC

** Envrc

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(envrc
       :fetcher github
       :repo "purcell/envrc"))
    )
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-envrc)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package envrc
    :init
    (envrc-global-mode)
    )
#+END_SRC

** Magit

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(magit
       :fetcher github
       :repo "magit/magit"))
    )
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-magit)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package magit)
#+END_SRC

** Eat

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(eat
       :fetcher github
       :repo "kephale/emacs-eat"
       :files ("*.el" ("term" "term/*.el") "*.texi"
               "*.ti" ("terminfo/e" "terminfo/e/*")
               ("terminfo/65" "terminfo/65/*")
               ("integration" "integration/*")
               (:exclude ".dir-locals.el" "*-tests.el")))))
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-eat)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package eat)
#+END_SRC

* Guix config

** Herd service

#+BEGIN_SRC scheme :noweb-ref guix-home
  ;; As taken from RDE:
  ;; https://git.sr.ht/~abcdw/rde/commit/0c5047816d6a804ae69199c54f66c4f4cb50e7e6
  ;;
  ;; This function was used, when shepherd get started before graphical
  ;; environment.
  (define (update-emacs-server-env-variables emacs-client)
    "Returns a PROGRAM-FILE, which get the current environment variables and make
    emacs servers' environment variables to same values."
    (program-file
     "update-emacs-server-env-variables"
     #~(system*
        #$emacs-client "--eval"
        (string-append
         "(mapcar (lambda (lst) (apply #'setenv lst)) '"
         (let* ((port   ((@ (ice-9 popen) open-input-pipe)
                         (string-append "env")))
                (result ((@ (ice-9 rdelim) read-delimited) "" port))
                (vars (map (lambda (x)
                             (let ((si (string-index x #\=)))
                               (list (string-take x si)
                                     (string-drop x (+ 1 si)))))
                           ((@ (srfi srfi-1) remove)
                            string-null? (string-split
                                          result #\newline)))))
           (close-port port)
           (format #f "~s" vars))
         ")"))))

  (define %home-services
    (append %home-services
            (list
             (simple-service 'emacs-update-environment
                             home-shepherd-service-type
                             (list (shepherd-service
                                    (provision '(emacs-update))
                                    (documentation "Update emacs server environment variables")
                                    (start #~(make-forkexec-constructor
                                              (list "sleep 2s && " ;; Need to wait until emacs daemon is loaded
                                                    '(update-emacs-server-env-variables emacs-client)))))))

             (simple-service 'emacsdaemon
                             home-shepherd-service-type
                             (list (shepherd-service
                                    (provision '(emacs))
                                    (documentation "Run `emacs --daemon'")
                                    (start #~(make-forkexec-constructor
                                              (list #$(file-append emacs "/bin/emacs")
                                                    "--fg-daemon")
                                              #:log-file #$(home-log "emacs")))
                                    (stop #~(make-system-destructor "emacsclient -e '(client-save-kill-emacs)'"))
                                    (respawn? #f)))))))
#+END_SRC

** Symlinking the init.el file

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-services
      (append %home-services
              (list
               (simple-service 'emacs-symlinking-service
                               home-files-service-type
                               `((".config/emacs/early-init.el"
                                  ,(local-file "home/.config/emacs/early-init.el" "emacs-early-init"))
                                 (".config/emacs/init.el"
                                  ,(local-file "home/.config/emacs/init.el" "emacs-init")))))))
#+END_SRC

* Windows automatic starting

#+BEGIN_SRC text :noweb yes :exports none :mkdirp yes :tangle home/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Startup/emacs-daemon.bat
  <<emacs-daemon-windows>>
#+END_SRC

#+BEGIN_SRC bat :noweb-ref emacs-daemon-windows
  @ECHO OFF
  DEL /Q %USERPROFILE%\.config\emacs\server\*
  SETX HOME %USERPROFILE%
  WHERE /Q runemacs.exe
  if ERRORLEVEL 0 (
    START /B "" runemacs.exe --daemon --init-directory %USERPROFILE%"/.config/emacs"
  )
#+END_SRC

*Note:* the init.el above moves the server auth directory to the ~%USERPROFILE%/.config/emacs~ folder, similar to the XDG standard. You will need to launch the emacsclient with that in mind, eg.:

#+BEGIN_EXAMPLE
emacsclientw.exe --server-file %USERPROFILE%/.config/emacs/server/server -r
#+END_EXAMPLE
