#+title: Emacs
#+author: Gábor Udvari

* Emacs config

The early-init.el file contains early configurations which do not need any extra packages.

#+BEGIN_SRC text :noweb yes :exports none :mkdirp yes :tangle home/.config/emacs/early-init.el
  <<emacs-early>>
#+END_SRC

The Emacs configurations will go into the init.el file.

#+BEGIN_SRC text :noweb yes :exports none :mkdirp yes :tangle home/.config/emacs/init.el
  <<emacs>>
#+END_SRC

The different emacs packages will be installed through Guix home, therefore we will add all the packages to the guix home configuration as well.

#+BEGIN_SRC scheme :noweb-ref guix-home
  (use-modules (gnu packages emacs))
  (use-modules (gnu packages emacs-xyz))

  (define %home-packages
    (append %home-packages
            (list emacs-pgtk)))
#+END_SRC

** early-init.el

#+BEGIN_SRC elisp :noweb-ref emacs-early
  (setq inhibit-startup-screen t ;; Disable startup screen
        inhibit-startup-message t ;; Disable startup message
        inhibit-startup-echo-area-message t ;; Disable startup message

        initial-scratch-message nil ;; No message in scratch buffer
        initial-buffer-choice nil ;; Initial buffer

        ;; frame-title-format nil ;; No frame title

        use-file-dialog nil ;; No file dialog
        use-dialog-box nil ;; No dialog box

        cursor-in-non-selected-windows nil) ;; Disable cursor in inactive windows)

  (setq byte-compile-warnings '(not obsolete)
        warning-suppress-log-types '((comp) (bytecomp)))

  ;; Save the original GC, file handler, VC handled backends values
  ;; set them to nil now, and restore them in an emacs-startup-hook.
  ;; This is taken from Prot's config, it should decrease startup time.
  (defvar my-gc-cons-threshold gc-cons-threshold)
  (setq gc-cons-threshold most-positive-fixnum)

  (defvar my-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)

  (defvar my-vc-handled-backends vc-handled-backends)
  (setq vc-handled-backends '(Git))

  ;; Windows accented usernames cause issues, maybe this helps?
  (set-language-environment "UTF-8")

  ;; Do not resize Emacs to column size
  (setq frame-inhibit-implied-resize t)

  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold my-gc-cons-threshold
                    file-name-handler-alist my-file-name-handler-alist
                    vc-handled-backends my-vc-handled-backends)))

  ;; Initialize package from cache
  (setq package-enable-at-startup t)

  ;; Avoid white background because we use a dark theme by default
  (setq mode-line-format nil)
  ;; (set-face-attribute 'default nil :background "#000000" :foreground "#ffffff")
  ;; (set-face-attribute 'mode-line nil :background "#000000" :foreground "#ffffff" :box 'unspecified)

  ;; Function for re-enabling the theme background, as taken
  ;; from Prot's config.
  (defun my-re-enable-frame-theme (_frame)
    (when-let ((theme (car custom-enabled-themes)))
      (enable-theme theme)))

  (add-hook 'after-make-frame-functions #'my-re-enable-frame-theme)

  (add-hook 'after-init-hook (lambda () (set-frame-name "home")))
#+END_SRC

** Defaults

Change some of the defaults to make a more minimal interface.

#+begin_src elisp :noweb-ref emacs
  ;; Setup customization file
  (setq custom-file (make-temp-file "emacs-custom-"))
  ;; Never load it
  ;; (load custom-file)

  ;; Prevent default.el to be run
  (setq inhibit-default-init t)

  ;; Automatically revert buffers
  (global-auto-revert-mode 1)

  ;; Support for colors in the compilation buffer
  (add-hook 'compilation-filter-hook 'ansi-color-compilation-filter)

  ;; Set the compilation buffer to auto scroll
  (setq compilation-scroll-output 1)

  ;; Change the default dir on Windows
  (if (eq system-type 'windows-nt)
      (progn
        ;; Note: the ~/ gets to be assigned to the HOME environment variable,
        ;; you need to set that one outside of Emacs
        (cd (expand-file-name (concat (getenv "HOMEPATH") "/")))
        (setq default-directory (expand-file-name (concat (getenv "HOMEPATH") "/")))
        ;; The no-littering package will set the same
        (setq server-auth-dir (expand-file-name (concat (getenv "HOMEPATH") "/.config/emacs/var/server/auth")))))

  ;; Put C:\Windows\System32 at the back of the PATH list on Windows,
  ;; see this WSL issue for context:
  ;; https://github.com/microsoft/WSL/discussions/9681
  (if (eq system-type 'windows-nt)
      (setenv "PATH"
              (string-join (let ((part "C:\\Windows\\system32"))
                             (append (remove part (split-string (getenv "PATH") ";" t)) `(,part))
                             ) ";")))

  ;; Load all lisp files from the init.d folder
  (if (eq system-type 'windows-nt)
      (mapc 'load (file-expand-wildcards (expand-file-name (concat (getenv "HOMEPATH") "/.config/emacs/init.d/*.el"))))
    (mapc 'load (file-expand-wildcards "~/.config/emacs/init.d/*.el")))

  (setq use-short-answers t) ;; y/n for answering yes/no questions

  ;; Make native compilation silent and prune its cache.
  (when (native-comp-available-p)
    (setq native-comp-async-report-warnings-errors 'silent) ; Emacs 28 with native compilation
    (setq native-compile-prune-cache t)) ; Emacs 29

  (setq-default indent-tabs-mode nil) ;; No tabs
  (setq-default tab-width 2) ;; 2 spaces as tabs

  ;; Resize frames based on the pixel size
  (setq frame-resize-pixelwise t)
  ;; Do not resize windows based on pixelwise, it may cause crashing
  (setq window-resize-pixelwise nil)
  (setq resize-mini-windows 'grow-only)

  ;; Faster scroll, but inaccurate syntax highlighting
  (setq fast-but-imprecise-scrolling t)

  ;; Move point to top/bottom of buffer before signaling a scrolling error.
  (setq scroll-error-top-bottom t)

  ;; Keeps screen position if the scroll command moved it vertically out of the
  ;; window.
  (setq scroll-preserve-screen-position t)

  ;; Set a bigger scroll margin, and do not always center the cursor
  (setq scroll-conservatively 10
        scroll-margin 5)

  ;; Move through windows with Ctrl-<arrow keys>
  (windmove-default-keybindings 'control)

  ;; Buffer encoding
  (prefer-coding-system                    'utf-8-unix)
  (set-default-coding-systems              'utf-8-unix)
  (set-terminal-coding-system              'utf-8-unix)
  (set-keyboard-coding-system              'utf-8-unix)
  (setq-default buffer-file-coding-system  'utf-8-unix)

  ;; Fix archaic defaults
  (setopt sentence-end-double-space nil)

  ;; Unique buffer names
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'reverse
        uniquify-separator " • "
        uniquify-after-kill-buffer-p t
        uniquify-ignore-buffers-re "^\\*")

  (setq default-major-mode 'text-mode) ;; Default major mode

  ;; Configure Ediff to use a single frame and split windows horizontally
  (setq ediff-window-setup-function #'ediff-setup-windows-plain
        ediff-split-window-function #'split-window-horizontally)

  ;; Configure SHR images to be smaller (eg. in Elfeed)
  (setq shr-max-image-proportion 0.6)

  ;; Auth sources (both are built-in)
  (setq auth-sources '((:source "~/.authinfo.gpg")))
  (setq auth-source-debug t)
  (auth-source-pass-enable)
  (setq auth-source-pass-filename "~/.local/share/pass")

  ;; Disable gpg agent so that Emacs handles the pinentry by itself
  (setenv "GPG_AGENT_INFO" nil)
#+end_src

** Simpler UI

As seen on https://www.youtube.com/watch?v=74zOY-vgkyw, and from the nano-defaults.el:

#+begin_src elisp :noweb-ref emacs
  (menu-bar-mode -1) ;; Disable menubar
  (tooltip-mode -1) ;; Disable tooltips

  (defun my-simple-ui ()
      (when (display-graphic-p)
        (set-fringe-mode 10)  ;; Give some breathing room
        (tool-bar-mode -1)  ;; Disable the toolbar
        ;; (scroll-bar-mode -1)  ;; Disable visible scrollbar
        ))

  (if (daemonp)
      (add-hook 'server-after-make-frame-hook #'my-simple-ui)
    (my-simple-ui))

  (setq indicate-empty-lines nil) ;; No empty line indicators
  (setq font-lock-maximum-decoration nil) ;; Moderate font lock
  (setq font-lock-maximum-size nil) ;; No limit on font lock

  (setq fill-column 80) ;; Fill column at 80
  (global-visual-line-mode 1) ;; Do line wrapping everywhere

  (setq visible-bell t) ;; Enable visible bell

  ;; Size of temporary buffers
  (temp-buffer-resize-mode)
  (setq temp-buffer-max-height 8)

  ;; Minimum window height
  (setq window-min-height 1)
#+end_src

** Windows

Make different windows appear in specific location inside the frame. Taken from the [[https://github.com/LionyxML/emacs-solo/blob/main/init.el][emacs-solo config]].

*** Config

#+begin_src elisp :noweb-ref emacs
  (use-package window
    :ensure nil
    :custom
    (display-buffer-alist
     '(
       ("\\*container\\*"
        (display-buffer-in-side-window)
        (window-width . 120)
        (side . left)
        (slot . -1))
       ("\\*\\(Backtrace\\|Warnings\\|Compile-Log\\|Messages\\|Bookmark List\\|Occur\\|eldoc\\)\\*"
        (display-buffer-in-side-window)
        (window-height . 0.25)
        (side . bottom)
        (slot . 0))
       ("\\*\\(Async Shell Command\\|Shell Command\\|compilation\\)\\*"
        (display-buffer-in-side-window)
        (window-height . 0.25)
        (side . bottom)
        (slot . 0))
       ("\\*\\([Hh]elp\\)\\*"
        (display-buffer-in-side-window)
        (window-width . 75)
        (side . right)
        (slot . 0))
       ("\\*\\(Ibuffer\\)\\*"
        (display-buffer-in-side-window)
        (window-width . 100)
        (side . right)
        (slot . 1))
       ("\\*\\(Flymake diagnostics\\|xref\\|Completions\\)"
        (display-buffer-in-side-window)
        (window-height . 0.25)
        (side . bottom)
        (slot . 1))
       ("\\*\\(grep\\|find\\)\\*"
        (display-buffer-in-side-window)
        (window-height . 0.25)
        (side . bottom)
        (slot . 2))
       )))
#+end_src

** Fonts

*** Config

Do not use any packages for this, just the built-in ~set-face-attribute~.

#+begin_src elisp :noweb-ref emacs
  (defun apply-fonts (variable-font fixed-font)
    (progn (let ((font fixed-font))
               (if (member font (font-family-list))
                   (progn (set-face-attribute 'default nil :font font :height 100)
                          (set-face-attribute 'fixed-pitch nil :font font :height 100))))
             (let ((font variable-font))
               (if (member font (font-family-list))
                   (progn (set-face-attribute 'mode-line nil :font font :height 120)
                          (set-face-attribute 'variable-pitch nil :font font :height 120))))))
#+end_src

We set separate fonts on Windows and where Guix is available, because Guix can install our custom fonts, but [[https://github.com/microsoft/terminal/issues/3257][Windows currently has issues]] with user installed fonts. Use Calibri and Cascadia Mono on Windows and use Cantarell and Fira Code where Guix is available:

#+begin_src elisp :noweb-ref emacs
  (defun my-fonts ()
    (cond ((eq system-type 'windows-nt) (apply-fonts "Calibri" "Cascadia Mono"))
          ((executable-find "guix") (apply-fonts "Cantarell" "Fira Code"))))
#+end_src

#+begin_src elisp :noweb-ref emacs
  (my-fonts)
  (if (daemonp)
      (add-hook 'server-after-make-frame-hook #'my-fonts))
#+end_src

** Modus themes

*** Installation

The themes modus-operandi and modus-vivendi are part of Emacs since version 28. No need for installation.

*** Config

#+begin_src elisp :noweb-ref emacs
  ;; Make customisations that affect Emacs faces BEFORE loading a theme
  ;; (any change needs a theme re-load to take effect).
  (use-package emacs
    :init
    ;; If you like two specific themes and want to switch between them, you
    ;; can specify them in `modus-themes-to-toggle' and then invoke the command
    ;; `modus-themes-toggle'.  All the themes are included in the variable
    ;; `modus-themes-collection'.
    (setq modus-themes-to-toggle '(modus-operandi modus-vivendi))

    ;; Set org blocks background
    (setq modus-themes-org-blocks 'gray-background) ; {nil,'gray-background,'tinted-background}

    (setq modus-themes-headings ; read the manual's entry or the doc string
          '((0 variable-pitch light 1.9)
            (1 variable-pitch light 1.8)
            (2 variable-pitch regular 1.7)
            (3 variable-pitch regular 1.6)
            (4 variable-pitch regular 1.5)
            (5 variable-pitch 1.4) ; absence of weight means `bold'
            (6 variable-pitch 1.3)
            (7 variable-pitch 1.2)
            (t variable-pitch 1.1)))

    ;; They are nil by default...
    (setq modus-themes-mixed-fonts t
          modus-themes-variable-pitch-ui t)

    ;; Configure modeline
    (setq modus-themes-mode-line '(accented borderless 4 0.9))

    ;; Add background for fringe area
    (setq modus-themes-fringes 'subtle)

    ;; Read the doc string or manual for this one.  The symbols can be
    ;; combined in any order.
    (setq modus-themes-region '(intense no-extend neutral))

    ;; Disable all other themes to avoid awkward blending:
    (mapc #'disable-theme custom-enabled-themes)

    :config
    ;; We use the built-in theme
    (load-theme 'modus-operandi))
#+end_src

** Package handling

Enable packages and use-package in all cases regardless of version (I use at least Emacs 29 everywhere) or OS.

#+begin_src elisp :noweb-ref emacs
  (require 'package)
  (eval-when-compile
    (require 'use-package))
#+end_src

Packages should not be ensured when Guix is available, but useful otherwise.

#+begin_src elisp :noweb-ref emacs
  (unless (or (executable-find "guix") (package-installed-p 'quelpa))
    (package-vc-install "https://github.com/quelpa/quelpa")

    ;; This is the officialy recommended way to bootstrap quelpa, but the
    ;; raw.githubusercontent.com domain might be prohibited
    ; (with-temp-buffer
    ;   (url-insert-file-contents "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
    ;   (eval-buffer)
    ;  (quelpa-self-upgrade)))
    )

  (setq quelpa-checkout-melpa-p ())
  (setq quelpa-update-melpa-p ())
#+end_src

** No littering

*** Installation

If Guix is not installed, then install within Emacs with Quelpa:

#+begin_src elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (progn
      (quelpa
       '(compat
         :fetcher github
         :repo "emacs-compat/compat"))
      (quelpa
       '(no-littering
         :fetcher github
         :repo "emacscollective/no-littering"))))
#+end_src

Add the Guix package to the home config:

#+begin_src scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-no-littering)))
#+end_src

*** Config

#+begin_src elisp :noweb-ref emacs
  (use-package no-littering
    :init
    ;; Move auto-save files to var
    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
    ;; Store custom-file in etc
    (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
    (load custom-file 'noerror 'nomessage)
    ;; Enable no-littering to configure auto-save, backup, etc.
    (no-littering-theme-backups))
#+end_src

** Spacious padding

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+begin_src elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(spacious-padding
       :fetcher github
       :repo "protesilaos/spacious-padding")))
#+end_src

Add the Guix packages to the home config:

#+begin_src scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-spacious-padding)))
#+end_src

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package spacious-padding
    :config
    (setq spacious-padding-widths
      '( :internal-border-width 0
         :header-line-width 4
         :mode-line-width 6
         :tab-width 4
         :tab-bar-width 0
         :right-divider-width 30
         :scroll-bar-width 20
         :fringe-width 8))
    ;; Emacs server-client mode has an ugly black border, this fixes it
    (if (daemonp)
        (add-hook 'server-after-make-frame-hook (lambda () (spacious-padding-mode 1)))
        (spacious-padding-mode 1)))
#+END_SRC

** Line numbers

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package display-line-numbers
    :config
    ;; Set absolute line numbers.  A value of "relative" is also useful.
    (setq display-line-numbers-type t)

    ;; Enable line numbers for programming modes
    (add-hook 'prog-mode-hook (lambda () (display-line-numbers-mode 1))))
#+END_SRC

** svg-tag-mode

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+begin_src elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (progn
      (quelpa
       '(svg-lib
         :fetcher github
         :stable nil
         :repo "rougier/svg-lib"))
      (quelpa
       '(svg-tag-mode
         :fetcher github
         :stable nil
         :repo "rougier/svg-tag-mode"))))
#+end_src

Add the Guix packages to the home config:

#+begin_src scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-svg-lib emacs-svg-tag-mode)))
#+end_src

*** Configuration

#+begin_src elisp :noweb-ref emacs
  ;; Same as example-2.el from svg-tag-mode
  (defconst date-re "[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}")
  (defconst time-re "[0-9]\\{2\\}:[0-9]\\{2\\}")
  (defconst day-re "[A-Za-z]\\{1,3\\}")  ;;; Allow less than 1 character for HUN localization
  (defconst day-time-re (format "\\(%s\\)? ?\\(%s\\)?" day-re time-re))

  (defun svg-progress-percent (value)
    (save-match-data
      (svg-image (svg-lib-concat
                  (svg-lib-progress-bar  (/ (string-to-number value) 100.0)
                                         nil :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                  (svg-lib-tag (concat value "%")
                               nil :stroke 0 :margin 0)) :ascent 'center)))

  (defun svg-progress-count (value)
    (save-match-data
      (let* ((seq (split-string value "/"))
             (count (if (stringp (car seq))
                        (float (string-to-number (car seq)))
                      0))
             (total (if (stringp (cadr seq))
                        (float (string-to-number (cadr seq)))
                      1000)))
        (svg-image (svg-lib-concat
                    (svg-lib-progress-bar (/ count total) nil
                                          :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                    (svg-lib-tag value nil
                                 :stroke 0 :margin 0)) :ascent 'center))))

  (use-package svg-tag-mode
    :init
    (setq svg-tag-tags
          `(
            ;; Org tags
            ; (":\\([A-Za-z0-9]+\\)" . ((lambda (tag) (svg-tag-make tag))))
            ; (":\\([A-Za-z0-9]+[ \-]\\)" . ((lambda (tag) tag)))

            ;; Task priority
            ("\\[#[A-Z]\\]" . ( (lambda (tag)
                                  (svg-tag-make tag :face 'org-priority
                                                :beg 2 :end -1 :margin 0))))

            ;; TODO / DONE
            ("TODO" . ((lambda (tag) (svg-tag-make "TODO" :face 'org-todo :inverse t :margin 0))))
            ("DONE" . ((lambda (tag) (svg-tag-make "DONE" :face 'org-done :margin 0))))


            ;; Citation of the form [cite:@Knuth:1984]
            ("\\(\\[cite:@[A-Za-z]+:\\)" . ((lambda (tag)
                                              (svg-tag-make tag
                                                            :inverse t
                                                            :beg 7 :end -1
                                                            :crop-right t))))
            ("\\[cite:@[A-Za-z]+:\\([0-9]+\\]\\)" . ((lambda (tag)
                                                       (svg-tag-make tag
                                                                     :end -1
                                                                     :crop-left t))))


            ;; Active date (with or without day name, with or without time)
            (,(format "\\(<%s>\\)" date-re) .
             ((lambda (tag)
                (svg-tag-make tag :beg 1 :end -1 :margin 0))))
            (,(format "\\(<%s \\)%s>" date-re day-time-re) .
             ((lambda (tag)
                (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0))))
            (,(format "<%s \\(%s>\\)" date-re day-time-re) .
             ((lambda (tag)
                (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0))))

            ;; Inactive date (with or without day name, with or without time)
            (,(format "\\(\\[%s\\]\\)" date-re) .
             ((lambda (tag)
                (svg-tag-make tag :beg 1 :end -1 :margin 0 :face 'org-date))))
            (,(format "\\(\\[%s \\)%s\\]" date-re day-time-re) .
             ((lambda (tag)
                (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0 :face 'org-date))))
            (,(format "\\[%s \\(%s\\]\\)" date-re day-time-re) .
             ((lambda (tag)
                (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0 :face 'org-date))))

            ;; Progress
            ("\\(\\[[0-9]\\{1,3\\}%\\]\\)" . ((lambda (tag)
                                                (svg-progress-percent (substring tag 1 -2)))))
            ("\\(\\[[0-9]+/[0-9]+\\]\\)" . ((lambda (tag)
                                              (svg-progress-count (substring tag 1 -1)))))
            ))
    :hook (;(prog-mode . svg-tag-mode)
           (org-mode . svg-tag-mode))
    )
#+end_src

** Dired

*** Configuration

#+begin_src elisp :noweb-ref emacs
  (use-package dired
    :config
    (setq dired-kill-when-opening-new-dired-buffer 1)
    (when (eq system-type 'windows-nt)
      ;; ls-lisp.el only kicks in on Windows. Everywhere else where
      ;; coreutils is available the TIME_STYLE environment variable
      ;; can be used. That one is taken care by exec-path-from-shell.
      (setq ls-lisp-format-time-list '("%F %H:%M" "%F %H:%M")
            ls-lisp-use-localized-time-format t)))
#+end_src

** Which key

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(which-key
       :fetcher github
       :repo "justbur/emacs-which-key")))
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-which-key)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package which-key
    :init
    (which-key-mode)
    )
#+END_SRC

** Exec path from shell

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(exec-path-from-shell
       :fetcher github
       :repo "purcell/exec-path-from-shell")))
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-exec-path-from-shell)))
#+END_SRC

*** Configuration

#+begin_src elisp :noweb-ref emacs
  (use-package exec-path-from-shell
    :init
    ;; TODO: there is something breaking Emacs if an interactive shell is used, only do a login shell
    (setq exec-path-from-shell-arguments (list "-l"))
    ;; There is an issue setting variables on Windows, set the shell variables depending on the OS
    (if (eq system-type 'windows-nt)
        (setq exec-path-from-shell-variables ())
      (setq exec-path-from-shell-variables '("PATH" "SSH_AUTH_SOCK" "SSH_AGENT_PID" "TIME_STYLE")))
    :config
    (exec-path-from-shell-initialize))
#+end_src

** Vertico

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(vertico
       :fetcher github
       :repo "minad/vertico")))
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-vertico)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Configure vertico
  (use-package vertico
    :init
    (vertico-mode)
    (setq enable-recursive-minibuffers t))
#+END_SRC

** Orderless

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(orderless
       :fetcher github
       :repo "oantolin/orderless")))
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-orderless)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+END_SRC

** Syntax checking

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(flycheck
       :fetcher github
       :repo "flycheck/flycheck"
       :files (:defaults
             "flycheck-readme.txt"))))
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-flycheck)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package flycheck
    :init (global-flycheck-mode))
#+END_SRC

** Spell checking

*** Installation

Flyspell is part of Emacs, no need to install the Emacs package separately.

Add the language file Guix packages to the home config:
#+begin_src scheme :noweb-ref guix-home
  (use-modules (gnu packages hunspell))

  (define %home-packages
    (append %home-packages
            (list hunspell
                  hunspell-dict-hu
                  hunspell-dict-en)))
#+end_src

If you are not on Guix you can download the dictionaries from the LibreOffice repository:

https://cgit.freedesktop.org/libreoffice/dictionaries/tree

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package flyspell
    :init
    ;; Configure hunspell
    (setq ispell-program-name "hunspell")
    (setq ispell-hunspell-dict-paths-alist
          '(("hu_HU" (concat (if (eq system-type 'windows-nt) (getenv "USERPROFILE") "~") (if (executable-find "guix") "/.guix-home/profile" "/.local") "/share/hunspell/hu_HU.aff"))
            ("en_US" (concat (if (eq system-type 'windows-nt) (getenv "USERPROFILE") "~") (if (executable-find "guix") "/.guix-home/profile" "/.local") "/share/hunspell/en_US.aff"))
            ))
    (setq ispell-local-dictionary-alist
          '(("Hungarian" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "hu_HU") nil utf-8)
            ("English"   "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
            ))
    )
#+END_SRC

** Pass

*** Installation

If guix is not installed, then install within Emacs using quelpa, with all the dependencies:

#+begin_src elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (progn
      (quelpa
       '(compat
         :fetcher github
         :repo "emacs-compat/compat"))
      (quelpa
       '(with-editor
          :fetcher github
          :repo "magit/with-editor"))
      (quelpa
       '(password-store
         :fetcher github
         :repo "emacsmirror/password-store"))
      (quelpa
       '(password-store-otp
         :fetcher github
         :repo "volrath/password-store-otp.el"))
      (quelpa
       '(pass
         :fetcher github
         :repo "NicolasPetton/pass"))))
#+end_src

Add the Guix packages to the home config:

#+begin_src scheme :noweb-ref guix-home
  (use-modules (gnu packages emacs-xyz))

  (define %home-packages
    (append %home-packages
            (list emacs-pass)))
#+end_src

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package pass)
#+END_SRC

** Age

Age is a dependency of Passage, if guix is not used we need to take care of it manually.

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+begin_src elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(age
       :fetcher github
       :repo "anticomputer/age.el")))
#+end_src

If guix is used, then ~emacs-passage~ will already install it, because it is a dependency.

*** Configuration

#+begin_src elisp :noweb-ref emacs
  (use-package age
    :config
    (age-file-enable))
#+end_src

** Passage

*** Installation

If guix is not installed, then install within Emacs using quelpa and all the dependencies:

#+begin_src elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (progn
      (quelpa
       '(compat
         :fetcher github
         :repo "emacs-compat/compat"))
      (quelpa
       '(with-editor
          :fetcher github
          :repo "magit/with-editor"))
      (quelpa
       '(s
         :fetcher github
         :repo "magnars/s.el"))
      (quelpa
       '(dash
         :fetcher github
         :repo "magnars/dash.el"))
      (quelpa
       '(f
         :fetcher github
         :repo "rejeep/f.el"))
       (quelpa
        '(passage
          :fetcher github
          :repo "anticomputer/passage.el"))))
#+end_src

Add the Guix packages to the home config:

#+begin_src scheme :noweb-ref guix-home
  (use-modules (gnu packages emacs-xyz))

  (define %home-packages
    (append %home-packages
            (list emacs-passage)))
#+end_src

*** Configuration

#+begin_src elisp :noweb-ref emacs
  (use-package passage)
#+end_src

** MU4E

*** Installation

TODO Need to figure out a way to install mu4e with quelpa.

Add the package to the guix-home config:

#+begin_src scheme :noweb-ref guix-home
  (use-modules (gnu packages mail))

  (define %home-packages
    (append %home-packages
            (list mu)))
#+end_src

*** Configuration

#+begin_src elisp :noweb-ref emacs
  (use-package mu4e
    :if (executable-find "guix")
    :config
    (setq mu4e-maildir "~/Mail")  ; Path to your Maildir
    (setq mu4e-get-mail-command "mbsync --all")
    (setq mu4e-confirm-quit nil)  ; Do not ask when quitting
    (setq mu4e-update-interval 300)  ; Update interval in seconds
    (setq mu4e-contexts
          `( ,(make-mu4e-context
               :name "gGmail"
               :enter-func (lambda () (mu4e-message "Entering Gmail context"))
               :leave-func (lambda () (mu4e-message "Leaving Gmail context"))
               :match-func (lambda (msg)
                             (when msg
                               (mu4e-message-contact-field-matches msg
                                                                   :to "gabor.udvari@gmail.com")))
               :vars '( ( user-mail-address	    . "gabor.udvari@gmail.com" )
                        ( user-full-name	    . "Udvari Gábor" )
                        ( message-signature .
                          (concat
                           "Üdvözlettel,\n"
                           "Udvari Gábor\n"))))

             ,(make-mu4e-context
               :name "hPersonal Hungarian"
               :enter-func (lambda () (mu4e-message "Entering Personal Hungarian context"))
               :leave-func (lambda () (mu4e-message "Leaving Personal Hungarian context"))
               :match-func (lambda (msg)
                             (when msg
                               (mu4e-message-contact-field-matches msg
                                                                   :to "level@udvarigabor.hu")))
               :vars '( ( user-mail-address	       . "level@udvarigabor.hu" )
                        ( user-full-name	       . "Udvari Gábor" )
                        ( message-signature         .
                          (concat
                           "Üdvözlettel,\n"
                           "Udvari Gábor\n"))))

             ,(make-mu4e-context
               :name "ePersonal English"
               :enter-func (lambda () (mu4e-message "Entering Personal English context"))
               :leave-func (lambda () (mu4e-message "Leaving Personal English context"))
               :match-func (lambda (msg)
                             (when msg
                               (mu4e-message-contact-field-matches msg
                                                                   :to "mail@gaborudvari.com")))
               :vars '( ( user-mail-address	       . "mail@gaborudvari.com" )
                        ( user-full-name	       . "Gabor Udvari" )
                        ( message-signature         .
                          (concat
                           "Best regards,\n"
                           "Gabor Udvari\n"))))))

    ;; set `mu4e-context-policy` and `mu4e-compose-policy` to tweak when mu4e should
    ;; guess or ask the correct context, e.g.

    ;; start with the first (default) context;
    ;; default is to ask-if-none (ask when there's no context yet, and none match)
    ;; (setq mu4e-context-policy 'pick-first)

    ;; compose with the current context is no context matches;
    ;; default is to ask
    ;; (setq mu4e-compose-context-policy nil)
    )
#+end_src

** Org mode

*** Installation

Org is bundled inside Emacs, so only need to install some extra packages, like emacs-org-modern and emacs-org-contrib.

If guix is not installed, then install within Emacs using quelpa:

#+begin_src elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (progn
      (quelpa
       '(org-contrib
         :fetcher github
         :repo "emacsmirror/org-contrib"
         :stable nil
         :files (:defaults
                 "lisp")))
      (quelpa
       '(org-modern
         :fetcher github
         :repo "minad/org-modern"))
      (quelpa
       '(org-margin
         :fetcher github
         :repo "rougier/org-margin"))))
#+end_src

Add the Guix packages to the home config:

#+begin_src scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-org-modern
                  emacs-org-contrib
                  emacs-org-texlive-collection
                  emacs-org-margin)))
#+end_src

*** Configuration

#+begin_src elisp :noweb-ref emacs
  (defun myhooks/org-mode-setup ()
    ;; Disable org-indent-mode because it causes empty background
    ;; for source blocks when the lines are too long
    (org-indent-mode -1)
    (variable-pitch-mode 1)
    (setq visual-line-fringe-indicators t)
    (visual-line-mode 1))

  (defun myhooks/org-font-setup ()
    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.3)
                    (org-level-2 . 1.25)
                    (org-level-3 . 1.2)
                    (org-level-4 . 1.1)
                    (org-level-5 . 1.05)
                    (org-level-6 . 1.05)
                    (org-level-7 . 1.05)
                    (org-level-8 . 1.05)))
      (set-face-attribute (car face) nil :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

  (use-package org
    :hook (org-mode . myhooks/org-mode-setup)
    :hook (org-mode . myhooks/org-font-setup)
    :init
    (setq org-ellipsis "…")  ; Calibri also needs to support this
    (setq org-hide-leading-stars nil)  ; Hide leading stars
    (setq org-src-fontify-natively t)
    (setq org-startup-folded 'nofold)

    ;; Active Babel languages
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((shell . t)
       (sql . t)
       (scheme . t))))

  (use-package org-agenda
    :init
    (if (eq system-type 'windows-nt)
        (defvar my-notes-folder (concat (getenv "HOMEPATH") "/Notes/"))
      (defvar my-notes-folder (concat (getenv "HOME") "/Notes/")))
    (when (file-exists-p my-notes-folder)
      (setq org-agenda-files (directory-files-recursively my-notes-folder ".org$" t))))

  (use-package org-tempo)
  (use-package org-contrib)

  (use-package ox-beamer)
  (use-package ox-latex
    :init
    (setq latex-run-command "xelatex"))

  (use-package ox-md)
  (use-package ox-confluence)

  (use-package org-modern
    :after org
    :config
    ;; Disable fringe, because Olivetti will move it to the left
    ;; and it looks ugly:
    (setq org-modern-block-fringe nil)
    ;; Disable org-modern-star, titles will be styled by the org-margin package
    (setq org-modern-star nil)
    ;; Disable a few org-modern stylings, where svg-tag-mode is better
    (setq org-modern-timestamp nil
          org-modern-priority nil
          org-modern-todo nil
          org-modern-tag nil
          org-modern-progress nil)
    (with-eval-after-load 'org (global-org-modern-mode)))

  (use-package org-margin
    :after org
    :hook (org-mode . org-margin-mode))
#+end_src

** Htmlize

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(htmlize
       :fetcher github
       :repo "hniksic/emacs-htmlize")))
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-htmlize)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package htmlize)
#+END_SRC

** PlantUML mode

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(plantuml-mode
       :fetcher github
       :repo "skuro/plantuml-mode")))
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-plantuml-mode)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package plantuml-mode
    :init
    ;; Set the execution mode to server
    (setq plantuml-default-exec-mode 'server)
    ;; Add support for org source blocks
    (add-to-list
     'org-src-lang-modes '("plantuml" . plantuml))
    )
#+END_SRC

** Engrave-faces

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(engrave-faces
       :fetcher github
       :repo "tecosaur/engrave-faces")))
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-engrave-faces)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package engrave-faces
    :init
    (setq org-latex-src-block-backend 'engraved))
#+END_SRC

** PHP mode

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(php-mode
       :fetcher github
       :repo "emacs-php/php-mode")))
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-php-mode)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package php-mode
    :config
    (setq php-mode-coding-style 'psr2))
#+END_SRC

** Paredit

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(paredit
       :fetcher github
       :repo "emacsmirror/paredit")))
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-paredit)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package paredit
    :commands (enable-paredit-mode)
    :hook ((emacs-lisp-mode . enable-paredit-mode)
           (eval-expression-minibuffer-setup . enable-paredit-mode)
           (ielm-mode . enable-paredit-mode)
           (lisp-mode . enable-paredit-mode)
           (lisp-interaction-mode . enable-paredit-mode)
           (scheme-mode . enable-paredit-mode)
           (slime-repl-mode . enable-paredit-mode)
           (clojure-mode . enable-paredit-mode)
           (clojurescript-mode . enable-paredit-mode)
           (cider-repl-mode . enable-paredit-mode)
           (cider-mode . enable-paredit-mode)
           (clojure-mode . enable-paredit-mode))
    :config
    (show-paren-mode t)

    :bind (("C->" . paredit-forward-slurp-sexp)
           ("C-<" . paredit-forward-barf-sexp)
           ("C-M-<" . paredit-backward-slurp-sexp)
           ("C-M->" . paredit-backward-barf-sexp)
           ("<C-right>" .  nil)
           ("<C-left>" .  nil)
           ("M-[" . paredit-wrap-square)
           ("M-{" . paredit-wrap-curly))

    ;; :after (autoload 'enable-paredit-mode "paredit" "Turn on
    ;; pseudo-structural editing of Lisp code." t)
    )
#+END_SRC

** Geiser

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+begin_src elisp :noweb-ref emacs
  (unless (or (eq system-type 'windows-nt) (executable-find "guix"))
    (progn
      (quelpa
       '(geiser
         :fetcher github
         :repo "emacsmirror/geiser"
         :files (:defaults
                 "elisp")))
      (quelpa
       '(geiser-guile
         :fetcher github
         :repo "emacsmirror/geiser-guile"
         :files (:defaults
                 "src")))))
#+end_src

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-geiser
                  emacs-geiser-guile)))
#+END_SRC

*** Configuration

#+begin_src elisp :noweb-ref emacs
  (use-package geiser-guile
    :unless (eq system-type 'windows-nt)
    :load-path (lambda () (file-name-concat (package-desc-dir (package-get-descriptor 'geiser))
                                            "elisp")))
#+end_src

** Markdown mode

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(markdown-mode
       :fetcher github
       :repo "jrblevin/markdown-mode"))
    )
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-markdown-mode)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (defun myhooks/markdown-mode-setup ()
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (defun myhooks/markdown-font-setup ()
    ;; Set faces for heading levels
    (dolist (face '((markdown-header-face-1 . 1.2)
                    (markdown-header-face-2 . 1.1)
                    (markdown-header-face-3 . 1.05)
                    (markdown-header-face-4 . 1.0)
                    (markdown-header-face-5 . 1.1)
                    (markdown-header-face-6 . 1.1)
                    (markdown-markup-face . 1.0)
                    ))
      (set-face-attribute (car face) nil :height (cdr face)))
    )

  (use-package markdown-mode
    :init
    (add-to-list 'auto-mode-alist
                 '("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . markdown-mode))

    (autoload 'gfm-mode "markdown-mode"
      "Major mode for editing GitHub Flavored Markdown files" t)
    (add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))

    (add-hook 'markdown-mode-hook #'myhooks/markdown-font-setup)
    (add-hook 'markdown-mode-hook #'myhooks/markdown-mode-setup)
    (add-hook 'markdown-mode-hook #'myhooks/visual-fill)
    )
#+END_SRC

** YAML mode

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(yaml-mode
       :fetcher github
       :repo "yoshiki/yaml-mode"))
    )
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-yaml-mode)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package yaml-mode
    :init
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
    )
#+END_SRC

** Dockerfile mode

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(dockerfile-mode
       :fetcher github
       :repo "spotify/dockerfile-mode"))
    )
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-dockerfile-mode)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package dockerfile-mode
    :mode ("Dockerfile" . dockerfile-mode))
#+END_SRC

** PDF Tools

*** Installation

If guix is not installed, then install within Emacs and all the dependencies using quelpa:

#+begin_src elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (progn
      (quelpa
       '(tablist
         :fetcher github
         :repo "politza/tablist"))
      (quelpa
       '(pdf-tools
         :fetcher github
         :repo "vedang/pdf-tools"))))
#+end_src

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-pdf-tools)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package pdf-tools
    :magic ("%PDF" . pdf-view-mode)
    :config (pdf-loader-install)
    )
#+END_SRC

** Elfeed

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+begin_src elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(elfeed
       :fetcher github
       :repo "skeeto/elfeed"))
    )
#+end_src

Add the Guix packages to the home config:

#+begin_src scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-elfeed)))
#+end_src

*** Configuration

#+begin_src elisp :noweb-ref emacs
  (use-package elfeed
    :init
    (setq elfeed-use-curl nil)
    (setq elfeed-feeds
      '(("https://xkcd.com/rss.xml" webcomic)
        ("https://planet.emacslife.com/atom.xml" emacs)
        ("https://telex.hu/rss" hungary news)
        ("https://24.hu/feed" hungary news)
        ("https://444.hu/feed" hungary news)
        ("https://www.phoronix.com/rss.php" open-source news)
        ("https://www.met.hu/methu/rss/rss.php" hungary news weather)
        ("https://www.freakingpenguin.com/feed.xml" guix guile)
        ;; Modern Vintage Gamer:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCjFaPUcJU1vwk193mnW_w1w" youtube gaming)
        ;; GothemChess:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCQHX6ViZmPsWiYSFAyS0a3Q" youtube chess)
        ;; System Crafters:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCAiiOTio8Yu69c3XnR7nQBQ" youtube guix emacs)
        ;; NDC Conferences:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCTdw38Cw6jcm0atBPA39a0Q" youtube conference programming)
        ;; Partizán:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCEFpEvuosfPGlV1VyUF6QOA" youtube hungary)
        ;; DnB Allstars:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCYQHXu4Ea4NTvBggGHT7cOQ" youtube music dnb)
        ;; UKF Drum & Bass:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCpYkkFDnvHka9CBuwxPpqXw" youtube music dnb)
        ;; Noclip
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC0fDG3byEcMtbOqPMymDNbw" youtube gamedev)
        ;; Chris Kohler News - no RSS
        ;; Venjent
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCrY8Y0rs3BlE3T57TOMM1aw" youtube music dnb)
        ;; Fire Department Chronicles
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCZbWCodPFwH2QQn772QnUxQ" youtube comedy)
        ;; El Estepario Siberiano = no RSS
        ;; Legal Eagle
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCLOwKVD0bYHxaDZxXkK4piw" youtube law)
        ;; La Mazmorra Abandon
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCIOPzvsO2I1oSwjT7NP9Q7A" youtube gaming dos)
        ;; Noriyaro
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCZGkMJEmCR1IqUduqt1uFUw" youtube cars jdm)
        ;; Tokyo Ska Paradise Orchestra
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC5RmUAcm_w5K9cxtQSj7W7g" youtube music ska)
        ;; Telex = no RSS
        ;; Games Done Quick = no RSS
        ;; James Hoffmann = no RSS
        ;; Babymetal
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC33_tIj4m1_XaqfFcomShvw" youtube music metal)
        ;; The Dead South
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCWqvhmZyB66eKv01SiH_Kjg" youtube music country)
        ;; 444 = no RSS
        ;; Abyssoft
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC6I9iYfcBQTCsiGpR3kV1Uw" youtube gaming)
        ;; Adam Neely
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCnkp4xDOwqqJD7sSM3xdUiQ" youtube music)
        ;; Ahoy
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCE1jXbVAGJQEORz9nZqb5bQ" youtube gaming)
        ;; Andrew Huberman
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC2D2CMWXMOVWx7giW1n3LIg" youtube podcast science)
        ;; Andrew Tropin = no RSS
        ;; Atomic Frontier
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCbCq5Y0WPGimG2jNXhoQxGw" youtube science)
        ;; Azahriah
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCNCDa02bSyeD690YT4l1jPw" youtube music hungary)
        ;; Benn Jordan
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC213K1tH6XJwHj6ZiVtLDrw" youtube music)
        ;; Blender
        ;; This is the Blender youtube channel, but Blender has their own Peertube instance:
        ;; ("https://www.youtube.com/feeds/videos.xml?channel_id=UCz75RVbH8q2jdBJ4SnwuZZQ" youtube blender)
        ("https://video.blender.org/feeds/videos.xml?sort=-publishedAt&isLocal=true" video blender)
        ;; Bolyai János Matematikai Társulat = no RSS
        ;; Brandon Y Lee = no RSS
        ;; Brodie Robertson = no RSS
        ;; Bryan Johnson = no RSS
        ;; Bödőcs Tibor = no RSS
        ;; Captain Disillusion = no RSS
        ;; Chase and Status = no RSS
        ;; Chinese Man:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCNzDFkfbKMWbG2v5F8LoE0Q" youtube music electronic)
        ;; Cinemassacre:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC0M0rxSz3IF0CsSour1iWmw" youtube gaming)
        ;; Coffeezilla = no RSS
        ;; Computerphile
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCCAgrIbwcJ67zIow1pNF30A" youtube science)
        ;; ContraPoints
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCNvsIonJdJ5E4EXMa65VYpA" youtube culture)
        ;; Crime Pays But Botany Doesn't = no RSS
        ;; Dalfutár:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCf8i6LzNPLLcRm75H62CkHQ" youtube music hungary)
        ;; Daniel Stenberg:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCD5eL38hFtSLiVFP9cCUJEA" youtube development opensource)
        ;; David Revoy:
        ("https://peertube.touhoppai.moe/feeds/videos.xml?sort=-publishedAt&isLocal=true" video opensource art)
        ;; DEFCON Conference:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC6Om9kAkl32dWlDSNlDS9Iw" youtube security conference)
        ;; DnB Portal:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCK85ttp6fAVE90DuuRI1jUA" youtube music dnb)
        ;; Dom Whiting:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCqP8aunScrdAcrUUQIOhI3Q" youtube music dnb)
        ;; Dominik Műhelye:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCHhjzdsx2tONc0vXRHXznTw" youtube repairing hungary)
        ;; Dylan Beattie:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCjJjavV8vOmu49a3vxPaWtQ" youtube computing)
        ;; Eddie Hall:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCLnGaOUBRXLfXhRzZcAQPlA" youtube sports strongman)
        ;; Electric Callboy = no RSS
        ;; ElectroBOOM = no RSS
        ;; ESA Speedrunning = no RSS
        ;; Explaining Computers:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCbiGcwDWZjz05njNPrJU7jA" youtube electronics)
        ;; Folding Ideas = no RSS
        ;; Frog Leap Studios = no RSS
        ;; Game Maker's Toolkit = no RSS
        ;; Games Nexus:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UChIs72whgZI9w6d6FhwGGHA" youtube gaming)
        ;; Games Done Quick = no RSS
        ;; Gavin Freeborn:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCJetJ7nDNLlEzDLXv7KIo0w" youtube lisp opensource)
        ;; GDConf = no RSS
        ;; GDQuest:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCxboW7x0jZqFdvMdCFKTMsQ" youtube gamedev opensource)
        ;; Glucose Revolution = no RSS
        ;; GMHikaru:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCweCc7bSMX5J4jEH7HFImng" youtube chess)
        ;; Godot Engine:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC9NuJImUbaSNKiwF2bdSfAw" youtube gamedev opensource)
        ;; Greyson Nekrutman:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCeo9VHZ09CQ6rI9v4Gl5JuQ" youtube music drums)
        ;; Gróf Balázs:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCOnhgPNvWPmUmNdtPkamLIQ" youtube hungary comedy)
        ;; Guix Social = no RSS
        ;; GVMERS:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UClA2kqtZcT7EhIJHnC8TMDA" youtube gaming)
        ;; HBomberGuy:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UClt01z1wHHT7c5lKcU8pxRQ" youtube documentary)
        ;; Inkscape
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCKKj0FJtVE8sGn4afabKvTA" youtube opensource art)
        ;; Jack Rhysider:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCMIqrmh2lMdzhlCPK5ahsAg" youtube security documentary)
        ;; Jeff Geerling = no RSS
        ;; Jimmy Broadbent = no RSS
        ;; Karl Jobst:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC3ltptWa0xfrDweghW94Acg" youtube speedrun)
        ;; Katinka Halápi = no RSS
        ;; Kovács András Péter:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCENUgjfqTMUmssyGCNObyEg" youtube hungary comedy)
        ;; Krazam = no RSS
        ;; Kurzgesagt:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCsXVk37bltHxD1rDPwtNM8Q" youtube science)
        ;; Kétfarkú Kutya Párt = no RSS
        ;; Last Week Tonight:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC3XTzVzaHQEd30rQbuvCtTQ" youtube comedy documentary)
        ;; Leo P:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCZR9XIrRXdEKtOL9WpynfZA" youtube music)
        ;; Liam Carps = no RSS
        ;; Libre Graphics Meeting:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UChBljJmEQtvegXwB1vDY7gQ" youtube graphics opensource)
        ;; Lock Picking Lawyer:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCm9K6rby98W8JigLoZOh6FQ" youtube lockpicking)
        ;; Louis Rossmann = no RSS
        ;; Low Level = no RSS
        ;; Low Spec Gamer = no RSS
        ;; Magyarország Kedvenc Műsora = no RSS
        ;; Mark Rober = no RSS
        ;; MattKC:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UChrYe70o7NmDioL02PRVWVg" youtube gamedev documentary)
        ;; Nathan Baggs = no RSS
        ;; Nerdforge = no RSS
        ;; Network Chuck:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC9x0AN7BWHpCDHSm9NiJFJQ" youtube opensource)
        ;; Nextcloud:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCQjN5Fs5QSz1loJqLb5bkew" youtube opensource)
        ;; Numberphile:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCnQtJro3IurKlxp7XSPqpaA" youtube mathematics)
        ;; Ordinary Things:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCxLYtICsUCWdr1YPrj5DtwA" youtube documentary)
        ;; penguinz0:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCq6VFHwMzcMXbuKyG7SQYIg" youtube comedy gaming)
        ;; People Make Games = no RSS
        ;; Philosophy Tube = no RSS
        ;; Physics Girl:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC7DdEm33SyaTDtWYGO2CwdA" youtube physics science)
        ;; Pottyondy Edina = no RSS
        ;; Programmers are also human:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCi8C7TNs2ohrc6hnRQ5Sn2w" youtube comedy programming)
        ;; Protesilaos Stavrou = no RSS
        ;; Rammstein Official:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCYp3rk70ACGXQ4gFAiMr1SQ" youtube music metal)
        ;; Real Real Japan:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCyIhBDft5f3kj4Xcua3p3kQ" youtube comedy japan)
        ;; Reluctant Anarchist:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCxrqVfm7FUHSkboVbp1dr7w" youtube linux opensource)
        ;; Remény Farm:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCNwlIVKlb833wIa1SniKF6w" youtube hungary farming)
        ;; Ren = no RSS
        ;; Renaissance Periodization:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCfQgsKhHjSyRLOp9mnffqVg" youtube sports science)
        ;; Rob Scallon = no RSS
        ;; Ryan C. Gordon:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCaz4VMH9qIwEya8LozbxzvQ" youtube gamedev opensource)
        ;; Saturday Night Live
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCqFzWxSCi39LnW1JKFR3efg" youtube comedy)
        ;; Scholar's Lore
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCm4eR95a524GYDUzz0dQ2OQ" youtube warhammer)
        ;; Scott Manley = no RSS
        ;; Serve The Home = no RSS
        ;; Simone Giertz:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC3KEoMzNz8eYnwBC34RaKCQ" youtube engineering)
        ;; Ska Tune Network
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCaRCs994odU7vWKwZak4yXA" youtube music ska)
        ;; Spacejunkie Zoom = no RSS
        ;; Spacejunkie Űrutazás:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCCbfGK0rnXmjUGS1KgbKepA" youtube science space)
        ;; Stand-up Maths = no RSS
        ;; Starpower Drummer:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCHPIPQTnEMeB9vW9uDc1yGA" youtube music dnb drums)
        ;; Stoned Meadow of Doom:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCkqjcQwTNvsxQWT44N6ESrA" youtube music metal)
        ;; Strange Parts:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCO8DQrSp5yEP937qNqTooOw" youtube electronics)
        ;; Tantacrul:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCi7l9chXMljpUft67vw78qw" youtube music)
        ;; Taran Van Hemert:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCd0ZD4iCXRXf18p3cA7EQfg" youtube video-editing)
        ;; Ten Second Songs = no RSS
        ;; The Back Focus = no RSS
        ;; The Charismatic Voice:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCnkp4xDOwqqJD7sSM3xdUiQ" youtube music singing)
        ;; The Spiffing Brit:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCRHXUZ0BxbkU2MYZgsuFgkQ" youtube gaming comedy)
        ;; The Taylor and Amy Show:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC098LVIqMd6HQI0B0kWtLgQ" youtube electronics)
        ;; The Witcher:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCzybXLxv08IApdjdN0mJhEg" youtube gaming)
        ;; The Primeagen:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC8ENHE5xdFSwx71u3fDH5Xw" youtube programming)
        ;; Thoughtbot = no RSS
        ;; Till Lindemann:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCkjot4p29KLU0pwc0srHeGg" youtube music metal)
        ;; Too Many Zooz:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCtjXVqMVzBIgU0SO8AV0vPg" youtube music brass)
        ;; TronicsFix = no RSS
        ;; Tóth Jakab = no RSS
        ;; Veritasium:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCmafpEjYI9WZH32DT0ebB1g" youtube science documentary)
        ;; Veronica Explains = no RSS
        ;; Voidzilla:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UC28n0tlcNSa1iPe5mettocg" youtube scams documentary)
        ;; Vox:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCLXo7UDZvByw2ixzpQCufnA" youtube documentary)
        ;; What's Ken Making:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UClS6E2qjk2DkxRCZ1xU0VXA" youtube electronics)
        ;; WMN Magazin:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCHKlicSHzHbIXcEDkvlIIkA" youtube hungary documentary)
        ;; Wolfgang's Channel:
        ("https://www.youtube.com/feeds/videos.xml?channel_id=UCsnGwSIHyoYN0kiINAGUKxg" youtube linux opensource)
        ;; TODO find an RSS feed for these
        ;; https://lospec.com/ygloof
        ;; https://x.com/cyangmou

        ;; Guix issues
        ("https://issues.guix.gnu.org/issue/78066?format=atom" guix issues)
        ))

    :config
    (elfeed-set-max-connections 4))
#+end_src

** Mastodon.el

*** Installation

If guix is not installed, then install it and all dependencies within Emacs using quelpa:

#+begin_src elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (progn
      (quelpa
       '(persist
         :fetcher github
         :repo "emacsmirror/persist"))
      (quelpa
       '(tp
         :fetcher github
         :repo "alphapapa/tp.el"))
      (quelpa
       '(mastodon
         :fetcher git
         :url "https://codeberg.org/martianh/mastodon.el"))))
#+end_src

Add the Guix packages to the home config:

#+begin_src scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-mastodon)))
#+end_src

*** Configuration

#+begin_src elisp :noweb-ref emacs
  (use-package mastodon
    :defer t
    :init
    (setq mastodon-instance-url "https://fosstodon.org"
          mastodon-active-user "gaborudvari"))
#+end_src

** EMMS

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(emms-setup
       :fetcher github
       :repo "emacsmirror/emms"))
    )
#+END_SRC

Add the Guix packages to the home config:

#+begin_src scheme :noweb-ref guix-home
  (use-modules (gnu packages emacs-xyz))

  (define %home-packages
    (append %home-packages
            (list emacs-emms)))
#+end_src

*** Configuration

#+begin_src elisp :noweb-ref emacs
  (use-package emms-setup
    :init
    (setq emms-player-list '(emms-player-mpv)
          emms-info-functions '(emms-info-native))
    :config
    (emms-all))
#+end_src

** Bluetooth

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+begin_src elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (progn
      (quelpa
       '(transient
         :fetcher github
         :repo "magit/transient"))
      (quelpa
       '(bluetooth
         :fetcher github
         :repo "emacsmirror/bluetooth"))))
#+end_src

Add the Guix packages to the home config:

#+begin_src scheme :noweb-ref guix-home
  (use-modules (gnu packages emacs-xyz))

  (define %home-packages
    (append %home-packages
            (list emacs-bluetooth)))
#+end_src

*** Configuration

#+begin_src elisp :noweb-ref emacs
  (use-package bluetooth
    :init
    (setq bluetooth-bluez-bus :system))
#+end_src

** Tramp

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package tramp
    :config
    ;; Based on tramp-sh.el https://git.savannah.gnu.org/cgit/tramp.git/tree/lisp/tramp-sh.el
    (add-to-list 'tramp-methods
                 '("mysudo"
                   (tramp-login-program        "env")
                   (tramp-login-args           (("SUDO_PROMPT=P\"\"a\"\"s\"\"s\"\"w\"\"o\"\"r\"\"d\"\":")
                                                ("sudo") ("su") ("-") ("%u") ))
                   (tramp-remote-shell         "/bin/sh")
                   (tramp-remote-shell-login   ("-l"))
                   (tramp-remote-shell-args    ("-c"))
                   (tramp-connection-timeout   10)
                   (tramp-session-timeout      300)
                   (tramp-password-previous-hop t)))
    )
#+END_SRC

** Envrc

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+begin_src elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (progn
      (quelpa
       '(inheritenv
         :fetcher github
         :repo "purcell/inheritenv"))
      (quelpa
       '(envrc
         :fetcher github
         :repo "purcell/envrc"))))
#+end_src

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-envrc)))
#+END_SRC

*** Configuration

#+begin_src elisp :noweb-ref emacs
  (use-package envrc
    :init
    (envrc-global-mode))
#+end_src

** Magit

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+begin_src elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (progn
      (quelpa
       '(llama
         :fetcher github
         :repo "tarsius/llama"))
      (quelpa
       '(magit-section
         :fetcher github
         :repo "magit/magit"))
      (quelpa
       '(magit
         :fetcher github
         :repo "magit/magit"))))
#+end_src

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-magit)))
#+END_SRC

*** Configuration

#+begin_src elisp :noweb-ref emacs
  (use-package magit
    :defer t)
#+end_src

** Eat

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(eat
       :fetcher github
       :repo "kephale/emacs-eat"
       :files ("*.el" ("term" "term/*.el") "*.texi"
               "*.ti" ("terminfo/e" "terminfo/e/*")
               ("terminfo/65" "terminfo/65/*")
               ("integration" "integration/*")
               (:exclude ".dir-locals.el" "*-tests.el")))))
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list emacs-eat)))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package eat)
#+END_SRC

** Chess

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+begin_src elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(chess
       :fetcher github
       :repo "jwiegley/emacs-chess")))
#+end_src

Add the Guix packages to the home config:

#+begin_src scheme :noweb-ref guix-home
  (use-modules (gnu packages games))

  (define %home-packages
      (append %home-packages
              (list emacs-chess
                    chess)))
#+end_src

*** Configuration

#+begin_src elisp :noweb-ref emacs
  (use-package chess
    :defer t
    :init
    (setq chess-images-separate-frame nil
          chess-images-default-size 40))
#+end_src

* Guix config

** Herd service

#+BEGIN_SRC scheme :noweb-ref guix-home
  ;; As taken from RDE:
  ;; https://git.sr.ht/~abcdw/rde/commit/0c5047816d6a804ae69199c54f66c4f4cb50e7e6
  ;;
  ;; This function was used, when shepherd get started before graphical
  ;; environment.
  (define (update-emacs-server-env-variables emacs-client)
    "Returns a PROGRAM-FILE, which get the current environment variables and make
    emacs servers' environment variables to same values."
    (program-file
     "update-emacs-server-env-variables"
     #~(system*
        #$emacs-client "--eval"
        (string-append
         "(mapcar (lambda (lst) (apply #'setenv lst)) '"
         (let* ((port   ((@ (ice-9 popen) open-input-pipe)
                         (string-append "env")))
                (result ((@ (ice-9 rdelim) read-delimited) "" port))
                (vars (map (lambda (x)
                             (let ((si (string-index x #\=)))
                               (list (string-take x si)
                                     (string-drop x (+ 1 si)))))
                           ((@ (srfi srfi-1) remove)
                            string-null? (string-split
                                          result #\newline)))))
           (close-port port)
           (format #f "~s" vars))
         ")"))))

  (define %home-services
    (append %home-services
            (list
             (simple-service 'emacs-update-environment
                             home-shepherd-service-type
                             (list (shepherd-service
                                    (provision '(emacs-update))
                                    (documentation "Update emacs server environment variables")
                                    (start #~(make-forkexec-constructor
                                              (list "sleep 2s && " ;; Need to wait until emacs daemon is loaded
                                                    '(update-emacs-server-env-variables emacs-client)))))))

             (simple-service 'emacsdaemon
                             home-shepherd-service-type
                             (list (shepherd-service
                                    (provision '(emacs))
                                    (documentation "Run `emacs --daemon'")
                                    (start #~(make-forkexec-constructor
                                              (list #$(file-append emacs "/bin/emacs")
                                                    "--fg-daemon")
                                              #:log-file #$(home-log "emacs")))
                                    (stop #~(make-system-destructor "emacsclient -e '(client-save-kill-emacs)'"))
                                    (respawn? #f)))))))
#+END_SRC

** Symlinking the init.el file

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-services
      (append %home-services
              (list
               (simple-service 'emacs-symlinking-service
                               home-files-service-type
                               `((".config/emacs/early-init.el"
                                  ,(local-file "home/.config/emacs/early-init.el" "emacs-early-init"))
                                 (".config/emacs/init.el"
                                  ,(local-file "home/.config/emacs/init.el" "emacs-init")))))))
#+END_SRC

* Windows automatic starting

When on Windows, create an automatic startup script for running the emacs daemon:

#+begin_src bat :mkdirp yes :tangle (if (eq system-type 'windows-nt) "home/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Startup/emacs-daemon.bat" "no")
  @ECHO OFF
  DEL /Q %USERPROFILE%\.config\emacs\server\*
  SETX HOME %USERPROFILE%
  WHERE /Q runemacs.exe
  if ERRORLEVEL 0 (
    START /B "" runemacs.exe --daemon --init-directory %USERPROFILE%"/.config/emacs"
  )
#+end_src

*Note:* the init.el above moves the server auth directory to the ~%USERPROFILE%/.config/emacs~ folder, similar to the XDG standard. You will need to launch the emacsclient with that in mind, eg.:

#+begin_example
emacsclientw.exe --server-file %USERPROFILE%/.config/emacs/server/server -r
#+end_example
