#+title: General packages and configs
#+author: GÃ¡bor Udvari

* Dig utility

I use the ~dig~ command frequently to troubleshoot DNS issues. Guix has it in the bind utils package.

#+begin_src scheme :noweb-ref guix-home
  (use-modules (gnu packages dns))

  (define %home-packages
    (append %home-packages
            ;; TODO The below works, but package+output seems to be internal
            ;; only. Replace it with specifications->manifest somehow:
            ;; https://issues.guix.gnu.org/62698
            (map (compose list specification->package+output)
               '("bind:utils"))))
#+end_src

* Fonts

I use Cantarell and Fire Code fonts in Emacs.

#+begin_src scheme :noweb-ref guix-home
  (use-modules (gnu packages fontutils))
  (use-modules (gnu packages fonts))

  (define %home-packages
    (append %home-packages
            (list fontconfig
                  font-fira-code
                  font-abattis-cantarell)))
#+end_src

* GNU tools

#+begin_src scheme :noweb-ref guix-home
  (use-modules (gnu packages base))

  (define %home-packages
    (append %home-packages
            (list grep
                  findutils
                  gnu-make)))
#+end_src

* Git

#+begin_src scheme :noweb-ref guix-home
  (use-modules (gnu packages version-control)
               (gnu packages haskell-apps))

  (define %home-packages
    (append %home-packages
            (list git
                  git-annex)))
#+end_src

* Linters

#+begin_src scheme :noweb-ref guix-home
  (use-modules (gnu packages python-xyz)
               (gnu packages web))

  (define %home-packages
    (append %home-packages
            (list jq
                  python-yamllint)))
#+end_src

* PDF tools

#+begin_src scheme :noweb-ref guix-home
  (use-modules (gnu packages pdf))

  (define %home-packages
    (append %home-packages
            (list pdfgrep
                  qpdf)))
#+end_src

* AGE

** General info

Official homepage:

- https://github.com/FiloSottile/age

Arguments against using GPG:

- https://blog.cryptographyengineering.com/2014/08/13/whats-matter-with-pgp/
- https://www.latacora.com/blog/2019/07/16/the-pgp-problem/
- https://soatok.blog/2024/11/15/what-to-use-instead-of-pgp/

** Usage

Generating an age keyfile with password:

#+begin_src shell
  age-keygen | age -p > key.age
#+end_src

Getting the file recipient part of a password protected age identity file:

#+begin_src shell
  age -d key.age | age-keygen -y -o ~/.passage/identities
#+end_src

** Guix Home config

#+begin_src scheme :noweb-ref guix-home
  (use-modules (gnu packages golang-crypto)
               (gnu packages password-utils))

  (define %home-packages
    (append %home-packages
            (list age
                  age-keygen
                  pass-age)))
#+end_src
