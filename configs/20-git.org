#+title: Git configuration
#+author: Gábor Udvari

* Git config

Place the config in the ~XDG_CONFIG_HOME~ folder.

#+begin_src text :noweb yes :exports none :mkdirp yes :tangle home/.config/git/config
  <<gitconfig>>
#+end_src

#+begin_src text :noweb-ref gitconfig
  [init]
    defaultBranch = main

  [core]
    quotepath = off
    autocrlf = input

  [pull]
    ff = only

  ; Include for all repositories inside the Personal folder.
  [includeIf "gitdir:~/Repositories/Personal/"]
    path = ~/.config/git/personal-config

  ; Include for all repositories inside the Work folder.
  ; Note: this config file might not exist, usually a separate work
  ; related repository will create it. Git will not throw any errors,
  ; if this file does not exist.
  [includeIf "gitdir:~/Repositories/Work/"]
    path = ~/.config/git/work-config
#+end_src

#+begin_src :exports none :mkdirp yes :tangle home/.config/git/personal-config
  [user]
    email = gabor.udvari@gmail.com
    name = Gábor Udvari
#+end_src

* Guix

** Packages

#+BEGIN_SRC scheme :noweb-ref guix-home
  (use-modules (gnu packages version-control)
               (gnu packages haskell-apps))

  (define %home-packages
    (append %home-packages
            (list git
                  git-annex)))
#+END_SRC

** Config linking service

Guix service for linking the git config file:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-services
    (append %home-services
            (list
             (simple-service 'gitconfig-symlinking-service
                             home-files-service-type
                             `(
                               (".config/git/config"
                                ,(local-file "home/.config/git/config" "gitconfig"))
                               (".config/git/personal-config"
                                ,(local-file "home/.config/git/personal-config" "gitconfig-personal")))))))
#+END_SRC
