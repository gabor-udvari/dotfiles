#+title: Emacs
#+author: Gábor Udvari

* Emacs

** Emacs config

Everything below will go into the init.el file.

#+BEGIN_SRC text :noweb yes :exports none :mkdirp yes :tangle ../build/config/emacs/init.el
  <<emacs>>
#+END_SRC

*** Simpler UI

As seen on https://www.youtube.com/watch?v=74zOY-vgkyw

#+BEGIN_SRC elisp :noweb-ref emacs
  (setq inhibit-startup-message t)

  (menu-bar-mode -1) ;; Disable menubar
  (scroll-bar-mode -1) ;; Disable visible scrollbar
  (tool-bar-mode -1) ;; Disable the toolbar
  (tooltip-mode -1) ;; Disable tooltips
  (set-fringe-mode 10) ;; Give some breathing room

  ;; Enable visible bell
  (setq visible-bell t)

  (load-theme 'wombat)

  ;; Enable line numbers globally
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  vterm-mode-hook
                  eat-mode-hook
                  markdown-mode-hook
                  ))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; Prevent GUI dialogs
  (setq use-dialog-box nil)

  ;; Automatically revert buffers
  (global-auto-revert-mode 1)

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  ;; Support for colors in the compilation buffer
  (add-hook 'compilation-filter-hook 'ansi-color-compilation-filter)

  ;; Guix home already installed the packages for us,
  ;; no need to use package.el or use-package
#+END_SRC

*** No littering

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Configure no-littering
  (require 'no-littering)
  ;; Move auto-save files to var
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
  ;; Store custom-file in etc
  (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
  (load custom-file 'noerror 'nomessage)
#+END_SRC

*** All the icons

#+BEGIN_SRC elisp :noweb-ref emacs
    ;; Load all the icons before the dashboard
    (require 'all-the-icons)
#+END_SRC

*** Dashboard

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Configure dashboard
  (defun myhooks/dashboard-font-setup ()
    (dolist (face '((dashboard-text-banner . 1.4)
                    (dashboard-banner-logo-title . 1.4)
                    (dashboard-heading . 1.2)
                    (dashboard-items-face . 1.0)
                    (dashboard-no-items-face . 1.0)))
      (set-face-attribute (car face) nil :font "cantarell" :weight 'regular :height (cdr face))))

  (require 'dashboard)
  (setq dashboard-set-heading-icons t)
  (myhooks/dashboard-font-setup)
  ;; Allow emacsclient -c to show dashboard as well
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
  ;; Set the banner
  (setq dashboard-startup-banner 'logo)
  ;; Disable emacs title
  (setq dashboard-banner-logo-title "")
  ;; Content is not centered by default. To center, set
  (setq dashboard-center-content t)
  ;; Configure project.el
  (setq dashboard-projects-backend 'project-el)
  ;; Configure widgets
  (setq dashboard-items '((recents  . 5)
                          (projects . 5)
                          (agenda . 5)))
  (setq dashboard-set-file-icons t)
  (setq dashboard-set-footer nil)
  (dashboard-setup-startup-hook)

  ;; In case of dashboard mode do a dashboard-refresh-buffer
  ;; As seen in https://github.com/emacs-dashboard/emacs-dashboard/issues/433#issuecomment-1468060398
  (add-hook 'server-after-make-frame-hook
              (lambda ()
                (when (eq (buffer-local-value 'major-mode (current-buffer)) 'dashboard-mode)
                  (dashboard-refresh-buffer))))
#+END_SRC

*** Vertico

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Configure vertico
  (require 'vertico)
  (vertico-mode)
  (setq enable-recursive-minibuffers t)
#+END_SRC

*** Doom modeline


#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Doom-modeline
  (require 'doom-modeline)
  (doom-modeline-mode 1)
#+END_SRC

*** Evil

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; For certain modes start in Emacs mode by default
  (defun myhooks/evil-hook ()
    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    term-mode
                    vterm-mode
                    dashboard-mode
                    ))
    (add-to-list 'evil-emacs-state-modes mode)))

  (setq evil-want-keybinding nil)
  (require 'evil)
  (setq evil-want-integration t)
  (add-hook 'evil-mode #'myhooks/evil-hook)
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  ;; (evil-set-initial-state 'dashboard-mode 'normal)

  ;; Configure evil-collection
  (evil-collection-init)

  ;; Configure evil-commentary-mode
  (evil-commentary-mode)
#+END_SRC

*** Hunspell

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Configure hunspell
  (setq ispell-program-name "hunspell")
  (setq ispell-hunspell-dict-paths-alist
    '(("hu_HU" "~/.guix-home/profile/share/hunspell/hu_HU.aff")
      ("en_US" "~/.guix-home/profile/share/hunspell/en_US.aff")
     ))
  (setq ispell-local-dictionary-alist
    '(("Hungarian" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "hu_HU") nil utf-8)
      ("English"   "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
     ))
#+END_SRC

*** Org-mode

#+BEGIN_SRC elisp :noweb-ref emacs
  (defun myhooks/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (defun myhooks/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

  (require 'org)
  (add-hook 'org-mode-hook #'myhooks/org-mode-setup)
  (setq org-ellipsis " ▾")
  ;; Hide leading stars
  (setq org-hide-leading-stars nil)
  (myhooks/org-font-setup)

  ;; Configure org-modern
  (with-eval-after-load 'org (global-org-modern-mode))

  ;; Org Agenda
  (setq org-agenda-files (list (expand-file-name "~/Jegyzetek")))
  (add-hook 'focus-in-hook 'org-agenda-list)
#+END_SRC

*** Visual Fill

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Configure Visual Fill
  (defun myhooks/visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (require 'visual-fill-column)
  (add-hook 'org-mode-hook #'myhooks/visual-fill)
#+END_SRC

*** Denote

#+BEGIN_SRC elisp :noweb-ref emacs
  (require 'denote)

  ;; Remember to check the doc strings of those variables.
  (setq denote-directory (expand-file-name "~/Jegyzetek/"))
  (setq denote-infer-keywords t)
  (setq denote-sort-keywords t)
  (setq denote-file-type nil) ; Org is the default, set others here
  (setq denote-prompts '(subdirectory title keywords))
  (setq denote-excluded-directories-regexp nil)
  (setq denote-excluded-keywords-regexp nil)

  ;; Pick dates, where relevant, with Org's advanced interface:
  (setq denote-date-prompt-use-org-read-date t)

  (setq denote-allow-multi-word-keywords t)

  ;; By default, we do not show the context of links.  We just display
  ;; file names.  This provides a more informative view.
  (setq denote-backlinks-show-context t)
#+END_SRC

*** Markdown mode

#+BEGIN_SRC elisp :noweb-ref emacs
  (defun myhooks/markdown-mode-setup ()
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (defun myhooks/markdown-font-setup ()
    ;; Set faces for heading levels
    (dolist (face '((markdown-header-face-1 . 1.2)
                    (markdown-header-face-2 . 1.1)
                    (markdown-header-face-3 . 1.05)
                    (markdown-header-face-4 . 1.0)
                    (markdown-header-face-5 . 1.1)
                    (markdown-header-face-6 . 1.1)
                    (markdown-markup-face . 1.0)
                    ))
      (set-face-attribute (car face) nil :font "cantarell" :weight 'regular :height (cdr face)))
    )

  (autoload 'markdown-mode "markdown-mode"
     "Major mode for editing Markdown files" t)
  (add-to-list 'auto-mode-alist
               '("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . markdown-mode))

  (autoload 'gfm-mode "markdown-mode"
     "Major mode for editing GitHub Flavored Markdown files" t)
  (add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))

  (add-hook 'markdown-mode-hook #'myhooks/markdown-font-setup)
  (add-hook 'markdown-mode-hook #'myhooks/markdown-mode-setup)
  (add-hook 'markdown-mode-hook #'myhooks/visual-fill)
#+END_SRC

*** YAML mode

#+BEGIN_SRC elisp :noweb-ref emacs
  (require 'yaml-mode)
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
#+END_SRC

*** EMMS

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; EMMS
  (require 'emms-setup)
  (emms-all)
  (setq emms-player-list '(emms-player-mpv)
        emms-info-functions '(emms-info-native))
#+END_SRC

*** Tramp

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Configure tramp
  (require 'tramp)
  ;; Based on tramp-sh.el https://git.savannah.gnu.org/cgit/tramp.git/tree/lisp/tramp-sh.el
  (add-to-list 'tramp-methods
               '("mysudo"
                     (tramp-login-program        "env")
                     (tramp-login-args           (("SUDO_PROMPT=P\"\"a\"\"s\"\"s\"\"w\"\"o\"\"r\"\"d\"\":")
                                                  ("sudo") ("su") ("-") ("%u") ))
                     (tramp-remote-shell         "/bin/sh")
                     (tramp-remote-shell-login   ("-l"))
                     (tramp-remote-shell-args    ("-c"))
                     (tramp-connection-timeout   10)
                     (tramp-session-timeout      300)
                     (tramp-password-previous-hop t)))
  ;; (setq tramp-use-ssh-controlmaster-options nil)
#+END_SRC

*** Disable mouse

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Configure disable mouse
  (require 'disable-mouse)
  (global-disable-mouse-mode)

  ;; This code is still unreleased for disable-mouse
  ;;;###autoload
  (defun disable-mouse-in-keymap (map &optional include-targets)
    "Rebind all mouse commands in MAP so that they are disabled.
  When INCLUDE-TARGETS is non-nil, also disable mouse actions that
  target GUI elements such as the modeline."
    (dolist (binding (disable-mouse--all-bindings include-targets))
      (define-key map binding 'disable-mouse--handle)))

  (mapc #'disable-mouse-in-keymap
    (list dashboard-mode-map
          evil-motion-state-map
          evil-normal-state-map
          evil-visual-state-map
          evil-insert-state-map
          ))
#+END_SRC

*** Envrc

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; direnv support
  (envrc-global-mode)
#+END_SRC

** Guix config

*** Herd service

#+BEGIN_SRC scheme :noweb-ref guix-home
(define %home-services
  (append %home-services
     (list
       (simple-service 'emacsdaemon
                 home-shepherd-service-type
                 (list (shepherd-service
                        (provision '(emacs))
                        (documentation "Run `emacs --daemon'")
                        (start #~(make-forkexec-constructor
                                  (list #$(file-append emacs "/bin/emacs")
                                        "--fg-daemon")
                                  #:log-file #$(home-log "emacs")))
                        (stop #~(make-system-destructor "emacsclient -e '(client-save-kill-emacs)'"))
                        (respawn? #f)))))))
#+END_SRC

*** Symlinking the init.el file

#+BEGIN_SRC scheme :noweb-ref guix-home
(define %home-services
  (append %home-services
     (list
       (simple-service 'emacs-symlinking-service
                        home-files-service-type
                        `((".config/emacs/init.el"
                          ,(local-file "../build/config/emacs/init.el" "emacs-init")))))))
#+END_SRC
