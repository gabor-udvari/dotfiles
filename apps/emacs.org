#+title: Emacs
#+author: Gábor Udvari

* Emacs config

The Emacs configurations will go into the init.el file.

#+BEGIN_SRC text :noweb yes :exports none :mkdirp yes :tangle home/.config/emacs/init.el
  <<emacs>>
#+END_SRC

The different emacs packages will be installed through Guix home, therefore we will add all the packages to the guix home configuration as well.

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs")))
#+END_SRC

** Simpler UI

As seen on https://www.youtube.com/watch?v=74zOY-vgkyw

#+BEGIN_SRC elisp :noweb-ref emacs
  (setq inhibit-startup-message t)

  (menu-bar-mode -1) ;; Disable menubar
  (scroll-bar-mode -1) ;; Disable visible scrollbar
  (tool-bar-mode -1) ;; Disable the toolbar
  (tooltip-mode -1) ;; Disable tooltips
  (set-fringe-mode 10) ;; Give some breathing room

  ;; Enable visible bell
  (setq visible-bell t)

  ;; Enable line numbers globally
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  vterm-mode-hook
                  eat-mode-hook
                  markdown-mode-hook
                  ))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; Prevent GUI dialogs
  (setq use-dialog-box nil)

  ;; Automatically revert buffers
  (global-auto-revert-mode 1)

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  ;; Support for colors in the compilation buffer
  (add-hook 'compilation-filter-hook 'ansi-color-compilation-filter)

  ;; Load all lisp files from the init.d folder
  (if (eq system-type 'windows-nt)
    (mapc 'load (file-expand-wildcards "~/.emacs.d/init.d/*.el"))
    (mapc 'load (file-expand-wildcards "~/.config/emacs/init.d/*.el"))
  )
#+END_SRC

** Package handling

Install ~quelpa~, ~quelpa-use-package~ and ~use-package~ if ~guix~ is not found on the system.

#+BEGIN_SRC elisp :noweb-ref emacs
  (require 'package)

  ;; (unless (executable-find "guix"))
  (unless (package-installed-p 'quelpa)
    (with-temp-buffer
        (url-insert-file-contents "https://github.com/quelpa/quelpa/raw/master/quelpa.el")
        (eval-buffer)
        (quelpa-self-upgrade)))

  (quelpa
   '(use-package
     :fetcher git
     :url "https://github.com/jwiegley/use-package"))
  (quelpa
   '(quelpa-use-package
     :fetcher git
     :url "https://github.com/quelpa/quelpa-use-package.git"))

  (require 'quelpa-use-package)

  ;; Make quelpa the function for use-package ensure
  (setq use-package-ensure-function 'quelpa)
  ;; Build stable packages
  (setq quelpa-stable-p t)
#+END_SRC

Require use-package and ensure all the packages. This will be always on, regardless of version or OS.

#+BEGIN_SRC elisp :noweb-ref emacs
  (eval-when-compile
    (require 'use-package)
  )

  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC

** Ef themes

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(ef-themes
       :fetcher github
       :repo "protesilaos/ef-themes"))
  )
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-ef-themes")))
#+END_SRC

*** Config

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Make customisations that affect Emacs faces BEFORE loading a theme
  ;; (any change needs a theme re-load to take effect).
  (use-package ef-themes
    :init
      ;; If you like two specific themes and want to switch between them, you
      ;; can specify them in `ef-themes-to-toggle' and then invoke the command
      ;; `ef-themes-toggle'.  All the themes are included in the variable
      ;; `ef-themes-collection'.
      (setq ef-themes-to-toggle '(ef-light ef-symbiosis))

      (setq ef-themes-headings ; read the manual's entry or the doc string
            '((0 variable-pitch light 1.9)
              (1 variable-pitch light 1.8)
              (2 variable-pitch regular 1.7)
              (3 variable-pitch regular 1.6)
              (4 variable-pitch regular 1.5)
              (5 variable-pitch 1.4) ; absence of weight means `bold'
              (6 variable-pitch 1.3)
              (7 variable-pitch 1.2)
              (t variable-pitch 1.1)))

      ;; They are nil by default...
      (setq ef-themes-mixed-fonts t
            ef-themes-variable-pitch-ui t)

      ;; Read the doc string or manual for this one.  The symbols can be
      ;; combined in any order.
      (setq ef-themes-region '(intense no-extend neutral))

      ;; Disable all other themes to avoid awkward blending:
      (mapc #'disable-theme custom-enabled-themes)

    :config
      ;; Use this to load the theme which also calls `ef-themes-post-load-hook':
      (ef-themes-select 'ef-symbiosis)
  )
#+END_SRC

** No littering

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(compat
       :fetcher github
       :repo "emacs-compat/compat"))
    (quelpa
     '(no-littering
       :fetcher github
       :repo "emacscollective/no-littering"))
  )
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-no-littering")))
#+END_SRC

*** Config

#+BEGIN_SRC elisp :noweb-ref emac
  ;; Configure no-littering
  (use-package no-littering
    :init
      ;; Move auto-save files to var
      (setq auto-save-file-name-transforms
            `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
      ;; Store custom-file in etc
      (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
      (load custom-file 'noerror 'nomessage)
  )
#+END_SRC

** All the icons

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(all-the-icons
       :fetcher github
       :repo "domtronn/all-the-icons.el"
       :files (:defaults
               "data")
      ))
  )
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-all-the-icons")))
#+END_SRC

*** Config

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Load all the icons before the dashboard
  (use-package all-the-icons)
#+END_SRC

** Vertico

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Configure vertico
  (use-package vertico
    :init
      (vertico-mode)
      (setq enable-recursive-minibuffers t)
  )
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-vertico")))
#+END_SRC

** Doom modeline

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Doom-modeline
  (use-package doom-modeline
    :init
      (doom-modeline-mode 1)
  )
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-doom-modeline")))
#+END_SRC

** Evil

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; For certain modes start in Emacs mode by default
  (defun myhooks/evil-hook ()
    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    term-mode
                    vterm-mode
                    ))
      (add-to-list 'evil-emacs-state-modes mode)))

  (use-package evil
    :init
      (setq evil-want-keybinding nil)

    :config
      (setq evil-want-integration t)
      (add-hook 'evil-mode #'myhooks/evil-hook)
      (evil-mode 1)
      (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
      (evil-global-set-key 'motion "j" 'evil-next-visual-line)
      (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
      (evil-set-initial-state 'messages-buffer-mode 'normal)
  )

  (use-package evil-collection
    :init
      (evil-collection-init)
  )

  (use-package evil-commentary
    :init
      (evil-commentary-mode)
  )
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-evil"
                  "emacs-evil-collection"
                  "emacs-evil-commentary")))
#+END_SRC

** Hunspell

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Configure hunspell
  (setq ispell-program-name "hunspell")
  (setq ispell-hunspell-dict-paths-alist
    '(("hu_HU" "~/.guix-home/profile/share/hunspell/hu_HU.aff")
      ("en_US" "~/.guix-home/profile/share/hunspell/en_US.aff")
     ))
  (setq ispell-local-dictionary-alist
    '(("Hungarian" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "hu_HU") nil utf-8)
      ("English"   "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
     ))
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "hunspell"
                  "hunspell-dict-hu"
                  "hunspell-dict-en")))
#+END_SRC

** Org-mode

#+BEGIN_SRC elisp :noweb-ref emacs
  (defun myhooks/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (defun myhooks/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

  (use-package org
    :init
      (add-hook 'org-mode-hook #'myhooks/org-mode-setup)
      (setq org-ellipsis " ▾")
      ;; Hide leading stars
      (setq org-hide-leading-stars nil)

      ;; Org Agenda
      (setq org-agenda-files (list (expand-file-name "~/Jegyzetek")))

    :config
      (myhooks/org-font-setup)
  )

  (use-package org-modern
    :config
      (with-eval-after-load 'org (global-org-modern-mode))
  )
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-org"
                  "emacs-org-modern")))
#+END_SRC

** Visual Fill

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    ;; The visual-fill-column was moved to Codeberg, but it is still archived on Github
    (quelpa
     '(visual-fill-column
       :fetcher github
       :repo "joostkremers/visual-fill-column"))
  )
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-visual-fill-column")))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Configure Visual Fill
  (defun myhooks/visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :init
    (add-hook 'org-mode-hook #'myhooks/visual-fill)
  )
#+END_SRC

** Denote

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(denote
       :fetcher github
       :repo "protesilaos/denote"))
  )
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-denote")))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package denote
    :init
      ;; Remember to check the doc strings of those variables.
      (setq denote-directory (expand-file-name "~/Jegyzetek/"))
      (setq denote-infer-keywords t)
      (setq denote-sort-keywords t)
      (setq denote-file-type nil) ; Org is the default, set others here
      (setq denote-prompts '(subdirectory title keywords))
      (setq denote-excluded-directories-regexp nil)
      (setq denote-excluded-keywords-regexp nil)

      ;; Pick dates, where relevant, with Org's advanced interface:
      (setq denote-date-prompt-use-org-read-date t)

      (setq denote-allow-multi-word-keywords t)

      ;; By default, we do not show the context of links.  We just display
      ;; file names.  This provides a more informative view.
      (setq denote-backlinks-show-context t)
  )
#+END_SRC

** Markdown mode

#+BEGIN_SRC elisp :noweb-ref emacs
  (defun myhooks/markdown-mode-setup ()
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (defun myhooks/markdown-font-setup ()
    ;; Set faces for heading levels
    (dolist (face '((markdown-header-face-1 . 1.2)
                    (markdown-header-face-2 . 1.1)
                    (markdown-header-face-3 . 1.05)
                    (markdown-header-face-4 . 1.0)
                    (markdown-header-face-5 . 1.1)
                    (markdown-header-face-6 . 1.1)
                    (markdown-markup-face . 1.0)
                    ))
      (set-face-attribute (car face) nil :font "cantarell" :weight 'regular :height (cdr face)))
    )

  (use-package markdown-mode
    :init
      (add-to-list 'auto-mode-alist
                   '("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . markdown-mode))

      (autoload 'gfm-mode "markdown-mode"
        "Major mode for editing GitHub Flavored Markdown files" t)
      (add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))

      (add-hook 'markdown-mode-hook #'myhooks/markdown-font-setup)
      (add-hook 'markdown-mode-hook #'myhooks/markdown-mode-setup)
      (add-hook 'markdown-mode-hook #'myhooks/visual-fill)
  )
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-markdown-mode")))
#+END_SRC

** YAML mode

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package yaml-mode
    :init
      (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
  )
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-yaml-mode")))
#+END_SRC

** EMMS

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(emms-setup
       :fetcher github
       :repo "emacsmirror/emms"))
  )
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-emms"
                  "mpv")))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; EMMS
  (use-package emms-setup
    :init
      (setq emms-player-list '(emms-player-mpv)
            emms-info-functions '(emms-info-native))
    :config
      (emms-all)
  )
#+END_SRC

** Tramp

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package tramp
    :config
      ;; Based on tramp-sh.el https://git.savannah.gnu.org/cgit/tramp.git/tree/lisp/tramp-sh.el
      (add-to-list 'tramp-methods
                   '("mysudo"
                     (tramp-login-program        "env")
                     (tramp-login-args           (("SUDO_PROMPT=P\"\"a\"\"s\"\"s\"\"w\"\"o\"\"r\"\"d\"\":")
                                                  ("sudo") ("su") ("-") ("%u") ))
                     (tramp-remote-shell         "/bin/sh")
                     (tramp-remote-shell-login   ("-l"))
                     (tramp-remote-shell-args    ("-c"))
                     (tramp-connection-timeout   10)
                     (tramp-session-timeout      300)
                     (tramp-password-previous-hop t)))
  )
#+END_SRC

** Disable mouse

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package disable-mouse
    :init
      (global-disable-mouse-mode)

      ;; This code is still unreleased for disable-mouse
      ;;;###autoload
      (defun disable-mouse-in-keymap (map &optional include-targets)
        "Rebind all mouse commands in MAP so that they are disabled.
      When INCLUDE-TARGETS is non-nil, also disable mouse actions that
      target GUI elements such as the modeline."
        (dolist (binding (disable-mouse--all-bindings include-targets))
          (define-key map binding 'disable-mouse--handle)))

      (mapc #'disable-mouse-in-keymap
            (list evil-motion-state-map
                  evil-normal-state-map
                  evil-visual-state-map
                  evil-insert-state-map
                  ))
  )
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-disable-mouse")))
#+END_SRC

** Envrc

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package envrc
    :init
      (envrc-global-mode)
  )
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-envrc"
                  "direnv")))
#+END_SRC

** Various other packages

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-magit"
                  "emacs-eat"
                  "emacs-vterm")))
#+END_SRC

* Guix config

** Herd service

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-services
    (append %home-services
            (list
             (simple-service 'emacsdaemon
                             home-shepherd-service-type
                             (list (shepherd-service
                                    (provision '(emacs))
                                    (documentation "Run `emacs --daemon'")
                                    (start #~(make-forkexec-constructor
                                              (list #$(file-append emacs "/bin/emacs")
                                                    "--fg-daemon")
                                              #:log-file #$(home-log "emacs")))
                                    (stop #~(make-system-destructor "emacsclient -e '(client-save-kill-emacs)'"))
                                    (respawn? #f)))))))
#+END_SRC

** Symlinking the init.el file

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-services
    (append %home-services
            (list
             (simple-service 'emacs-symlinking-service
                             home-files-service-type
                             `((".config/emacs/init.el"
                                ,(local-file "home/.config/emacs/init.el" "emacs-init")))))))
#+END_SRC
