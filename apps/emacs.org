#+title: Emacs
#+author: Gábor Udvari

* Emacs config

The Emacs configurations will go into the init.el file.

#+BEGIN_SRC text :noweb yes :exports none :mkdirp yes :tangle home/.config/emacs/init.el
  <<emacs>>
#+END_SRC

The different emacs packages will be installed through Guix home, therefore we will add all the packages to the guix home configuration as well.

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs")))
#+END_SRC

** Defaults

Change some of the defaults to make a more minimal interface.

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Setup customization file
  (setq custom-file "~/.config/emacs/custom.el")
  ;; (load custom-file)

  ;; Automatically revert buffers
  (global-auto-revert-mode 1)

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  ;; Support for colors in the compilation buffer
  (add-hook 'compilation-filter-hook 'ansi-color-compilation-filter)

  ;; Load all lisp files from the init.d folder
  (if (eq system-type 'windows-nt)
    (mapc 'load (file-expand-wildcards "~/.emacs.d/init.d/*.el"))
    (mapc 'load (file-expand-wildcards "~/.config/emacs/init.d/*.el"))
  )

  ;; y/n for  answering yes/no questions
  (fset 'yes-or-no-p 'y-or-n-p)

  (setq-default indent-tabs-mode nil) ;; No tabs
  (setq-default tab-width 2) ;; 2 spaces as tabs

  ;; Buffer encoding
  (prefer-coding-system       'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-language-environment   'utf-8)

  ;; Unique buffer names
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'reverse
        uniquify-separator " • "
        uniquify-after-kill-buffer-p t
        uniquify-ignore-buffers-re "^\\*")
#+END_SRC

** Simpler UI

As seen on https://www.youtube.com/watch?v=74zOY-vgkyw, and from the nano-defaults.el:

#+BEGIN_SRC elisp :noweb-ref emacs
  (setq inhibit-startup-screen t) ;; Disable startup screen
  (setq inhibit-startup-message t) ;; Disable startup message
  (setq inhibit-startup-echo-area-message t) ;; Disable startup message

  (setq initial-scratch-message nil) ;; No message in scratch buffer
  (setq initial-buffer-choice nil) ;; Initial buffer
  (setq initial-major-mode 'text-mode) ;; Initial major mode

  (setq default-major-mode 'text-mode) ;; Default major mode

  (setq frame-title-format nil) ;; No frame title

  (setq use-file-dialog nil) ;; No file dialog
  (setq use-dialog-box nil) ;; No dialog box

  (setq indicate-empty-lines nil) ;; No empty line indicators

  (setq cursor-in-non-selected-windows nil) ;; Disable cursor in inactive windows

  (setq font-lock-maximum-decoration nil) ;; Moderate font lock
  (setq font-lock-maximum-size nil) ;; No limit on font lock

  ;; TODO: there is something wrong with disabling auto-fill-mode
  ;; (setq-default auto-fill-mode -1) ;; No line break space points
  ;; (add-hook 'text-mode-hook 'turn-off-auto-fill)
  ;; (setq fill-column 80) ;; Fill column at 80
  ;; (add-hook 'text-mode-hook (lambda () (auto-fill-mode -1)))
  ;; (remove-hook 'text-mode-hook #'turn-on-auto-fill)
  ;; (remove-hook 'text-mode-hook #'auto-detect-wrap)

  (menu-bar-mode -1) ;; Disable menubar
  (scroll-bar-mode -1) ;; Disable visible scrollbar
  (tool-bar-mode -1) ;; Disable the toolbar
  (tooltip-mode -1) ;; Disable tooltips
  (set-fringe-mode 10) ;; Give some breathing room

  ;; Enable visible bell
  (setq visible-bell t)

  ;; Size of temporary buffers
  (temp-buffer-resize-mode)
  (setq temp-buffer-max-height 8)

  ;; Minimum window height
  (setq window-min-height 1)

  ;; Add frame borders and window dividers
  (modify-all-frames-parameters
   '((right-divider-width . 20)
     (internal-border-width . 20)))
  (dolist (face '(window-divider
                  window-divider-first-pixel
                  window-divider-last-pixel))
          (face-spec-reset-face face)
            (set-face-foreground face (face-attribute 'default :background)))
  (set-face-background 'fringe (face-attribute 'default :background))
#+END_SRC

** Line numbers

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Enable line numbers globally
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  vterm-mode-hook
                  eat-mode-hook
                  markdown-mode-hook
                 ))
          (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; Prevent GUI dialogs
#+END_SRC

** Package handling

Install ~quelpa~, ~quelpa-use-package~ and ~use-package~ if ~guix~ is not found on the system.

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (require 'package)

    (unless (package-installed-p 'quelpa)
      (with-temp-buffer
          (url-insert-file-contents "https://github.com/quelpa/quelpa/raw/master/quelpa.el")
          (eval-buffer)
          (quelpa-self-upgrade)))

    ;; Build stable packages
    (setq quelpa-stable-p t)
    ;; Do not update MELPA repo list on startup
    ;; (setq quelpa-update-melpa-p nil)

    (quelpa
     '(use-package
       :fetcher git
       :url "https://github.com/jwiegley/use-package"))
    (quelpa
     '(quelpa-use-package
       :fetcher git
       :url "https://github.com/quelpa/quelpa-use-package.git"))

    (require 'quelpa-use-package)

    ;; Make quelpa the function for use-package ensure
    (setq use-package-ensure-function 'quelpa)
  )
#+END_SRC

Require use-package in all cases regardless of version or OS.

#+BEGIN_SRC elisp :noweb-ref emacs
  (eval-when-compile
    (require 'use-package)
  )
#+END_SRC

Ensuring packages is not required when Guix is available, but useful otherwise.

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (require 'use-package-ensure)
    (setq use-package-always-ensure t)
  )
#+END_SRC

** Fontaine

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(fontaine
       :fetcher github
       :repo "protesilaos/fontaine"))
  )
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-fontaine")))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package fontaine
    :init
      (setq fontaine-presets
      '((regular
         :default-height 120)
        (medium
         :default-weight semilight
         :default-height 140)
        (large
         :default-weight semilight
         :default-height 180
         :bold-weight extrabold)
        (t ; our shared fallback properties
         :default-family "Consolas"
         :default-weight normal
         :variable-pitch-family "Arial"
         :variable-pitch-height 1.05)))

      (setq fontaine-latest-state-file
        (locate-user-emacs-file "fontaine-latest-state.eld"))

    :config
      ;; Recover last preset or fall back to desired style from
      ;; `fontaine-presets'.
      (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular))

      ;; The other side of `fontaine-restore-latest-preset'.
      (add-hook 'kill-emacs-hook #'fontaine-store-latest-preset)

      ;; Persist font configurations while switching themes (doing it with
      ;; my `modus-themes' and `ef-themes' via the hooks they provide).
      (add-hook 'ef-themes-after-load-theme-hook #'fontaine-apply-current-preset)
  )
#+END_SRC

** Ef themes

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(ef-themes
       :fetcher github
       :repo "protesilaos/ef-themes"))
  )
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-ef-themes")))
#+END_SRC

*** Config

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Make customisations that affect Emacs faces BEFORE loading a theme
  ;; (any change needs a theme re-load to take effect).
  (use-package ef-themes
    :init
      ;; If you like two specific themes and want to switch between them, you
      ;; can specify them in `ef-themes-to-toggle' and then invoke the command
      ;; `ef-themes-toggle'.  All the themes are included in the variable
      ;; `ef-themes-collection'.
      (setq ef-themes-to-toggle '(ef-light ef-symbiosis))

      (setq ef-themes-headings ; read the manual's entry or the doc string
            '((0 variable-pitch light 1.9)
              (1 variable-pitch light 1.8)
              (2 variable-pitch regular 1.7)
              (3 variable-pitch regular 1.6)
              (4 variable-pitch regular 1.5)
              (5 variable-pitch 1.4) ; absence of weight means `bold'
              (6 variable-pitch 1.3)
              (7 variable-pitch 1.2)
              (t variable-pitch 1.1)))

      ;; They are nil by default...
      (setq ef-themes-mixed-fonts t
            ef-themes-variable-pitch-ui t)

      ;; Read the doc string or manual for this one.  The symbols can be
      ;; combined in any order.
      (setq ef-themes-region '(intense no-extend neutral))

      ;; Disable all other themes to avoid awkward blending:
      (mapc #'disable-theme custom-enabled-themes)

    :config
      ;; Use this to load the theme which also calls `ef-themes-post-load-hook':
      (ef-themes-select 'ef-symbiosis)
  )
#+END_SRC

** All the icons

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(all-the-icons
       :fetcher github
       :repo "domtronn/all-the-icons.el"
       :files (:defaults
               "data")
      ))
  )
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-all-the-icons")))
#+END_SRC

*** Config

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Load all the icons before the dashboard
  (use-package all-the-icons)
#+END_SRC

** General

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(general
       :fetcher github
       :repo "noctuid/general.el"
       :stable nil
      ))
  )
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-general")))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
(use-package general
    :after evil
    :config
    (general-create-definer my-leader-def
                            :prefix "SPC"
                            )

    ;; Global keybindigs
    (my-leader-def
     :states '(normal emacs)
     :keymaps 'override
     :major-modes t

     "SPC"     '("M-x" . execute-extended-command)
     "TAB"     '("last buffer" . alternate-buffer)
     "!"       '("shell cmd" . shell-command)

     ;; Buffer
     "b"       (cons "buffers" (make-sparse-keymap))
     "bb"      'switch-to-buffer
     "bB"      'ibuffer
     "bd"      'kill-current-buffer
     "bm"      'switch-to-messages-buffer
     "bs"      'switch-to-scratch-buffer
     "bu"      'reopen-killed-buffer
     "bx"      'kill-buffer-and-window

     ;; Code
     "c"       (cons "code" (make-sparse-keymap))
     "cb"      'flymake-show-buffer-diagnostics
     "cc"      'compile
     "cn"      'next-error
     "cp"      'previous-error
     "cr"      'recompile
     "cx"      'kill-compilation
     "c="      'indent-region-or-buffer

     ;; File
     "f"       (cons "files" (make-sparse-keymap))
     "fC"      '("copy-file" . write-file)
     "fD"      'delete-current-buffer-file
     "fe"      'find-library
     "fE"      'sudo-edit
     "ff"      'find-file
     "fj"      'dired-jump
     "fJ"      'dired-jump-other-window
     "fo"      'open-file-or-directory-in-external-app
     "fR"      'rename-current-buffer-file
     "fs"      'save-buffer
     "fv"      (cons "variables" (make-sparse-keymap))
     "fvd"     'add-dir-local-variable
     "fvf"     'add-file-local-variable
     "fvp"     'add-file-local-variable-prop-line

     ;; Help
     "h"       (cons "help" (make-sparse-keymap))
     "ha"      'apropos
     "hb"      'describe-bindings
     "hc"      'describe-char
     "hf"      'describe-function
     "hF"      'describe-face
     "hi"      'info-emacs-manual
     "hI"      'info-display-manual
     "hk"      'describe-key
     "hK"      'describe-keymap
     "hm"      'describe-mode
     "hM"      'woman
     "hp"      'describe-package
     "ht"      'describe-text-properties
     "hv"      'describe-variable
     "hP"      (cons "profiler" (make-sparse-keymap))
     "hPs"     'profiler-start
     "hPk"     'profiler-stop
     "hPr"     'profiler-report

     ;; Projects
     "p"       (cons "projects" project-prefix-map)
     "pt"      'project-open-in-tab

     ;; Quit
     "q"       (cons "quit" (make-sparse-keymap))
     "qd"      'restart-emacs-debug-init
     "qr"      'restart-emacs
     "qR"      'restart-emacs-without-desktop
     "qf"      'delete-frame
     "qq"      'save-buffers-kill-terminal
     "qQ"      'save-buffers-kill-emacs

     ;; Spelling
     "s"       (cons "spelling" (make-sparse-keymap))
     "sb"      'flyspell-buffer
     "sn"      'flyspell-goto-next-error
     "sr"      'flyspell-region

     ;; Toggles
     "T"       (cons "toggles" (make-sparse-keymap))
     "Ta"      'auto-fill-mode
     "Td"      'toggle-debug-on-error
     "Tf"      'display-fill-column-indicator-mode
     "Tl"      'toggle-truncate-lines
     "Tm"      'flymake-mode
     "Tn"      'display-line-numbers-mode
     "Ts"      'flyspell-mode
     "Tw"      'whitespace-mode
     "TW"      'toggle-word-wrap

     ;; Windows
     "w"       (cons "windows" (make-sparse-keymap))
     "w TAB"   'alternate-window
     "w+"      'window-layout-toggle
     "wb"      'switch-to-minibuffer-window
     "wd"      'delete-window
     "wD"      'delete-other-windows
     "wm"      'toggle-maximize-buffer
     "wf"      'follow-mode
     "wh"      'evil-window-left
     "wH"      'evil-window-move-far-left
     "wj"      'evil-window-down
     "wJ"      'evil-window-move-very-bottom
     "wk"      'evil-window-up
     "wK"      'evil-window-move-very-top
     "wl"      'evil-window-right
     "wL"      'evil-window-move-far-right
     "wr"      'rotate-windows-forward
     "wR"      'rotate-windows-backward
     "ws"      'split-window-vertically
     "wS"      'split-window-vertically-and-focus
     "wt"      'toggle-current-window-dedication
     "wu"      'winner-undo
     "wU"      'winner-redo
     "wv"      'split-window-horizontally
     "wV"      'split-window-horizontally-and-focus
     )
    )
#+END_SRC

** Which key

*** Installation

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-which-key")))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package which-key
    :init
      (which-key-mode)
  )
#+END_SRC

** No littering

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(compat
       :fetcher github
       :repo "emacs-compat/compat"))
    (quelpa
     '(no-littering
       :fetcher github
       :repo "emacscollective/no-littering"))
  )
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-no-littering")))
#+END_SRC

*** Config

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Configure no-littering
  (use-package no-littering
    :init
      ;; Move auto-save files to var
      (setq auto-save-file-name-transforms
            `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
      ;; Store custom-file in etc
      (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
      (load custom-file 'noerror 'nomessage)
      ;; Enable no-littering to configure auto-save, backup, etc.
      (no-littering-theme-backups)
  )
#+END_SRC

** Vertico

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Configure vertico
  (use-package vertico
    :init
      (vertico-mode)
      (setq enable-recursive-minibuffers t)
  )
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-vertico")))
#+END_SRC

** Doom modeline

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Doom-modeline
  (use-package doom-modeline
    :init
      (doom-modeline-mode 1)
  )
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-doom-modeline")))
#+END_SRC

** Evil

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; For certain modes start in Emacs mode by default
  (defun myhooks/evil-hook ()
    (dolist (mode '(custom-mode
                    git-rebase-mode
                    ))
      (add-to-list 'evil-emacs-state-modes mode)))

  (use-package evil
    :init
      (setq evil-want-keybinding nil)

    :config
      (setq evil-want-integration t)
      (add-hook 'evil-mode #'myhooks/evil-hook)
      (evil-mode 1)
      (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
      (evil-global-set-key 'motion "j" 'evil-next-visual-line)
      (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
      (evil-set-initial-state 'messages-buffer-mode 'normal)
  )

  (use-package evil-collection
    :after evil
    :config
      (evil-collection-init '(org
                              dired
                              vterm))
  )

  (use-package evil-commentary
    :after evil
    :init
      ;; (evil-commentary-mode)
  )
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-evil"
                  "emacs-evil-collection"
                  "emacs-evil-commentary")))
#+END_SRC

** Hunspell

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Configure hunspell
  (setq ispell-program-name "hunspell")
  (setq ispell-hunspell-dict-paths-alist
    '(("hu_HU" "~/.guix-home/profile/share/hunspell/hu_HU.aff")
      ("en_US" "~/.guix-home/profile/share/hunspell/en_US.aff")
     ))
  (setq ispell-local-dictionary-alist
    '(("Hungarian" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "hu_HU") nil utf-8)
      ("English"   "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
     ))
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "hunspell"
                  "hunspell-dict-hu"
                  "hunspell-dict-en")))
#+END_SRC

** Org-mode

*** Installation

Org is bundled inside Emacs, so only need to install some extra packages, like emacs-org-modern emacs-org-contrib.

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(org-contrib
       :fetcher github
       :repo "emacsmirror/org-contrib"
       :stable nil
       :files (:defaults
               "lisp")))
  )
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-org-modern")))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (defun myhooks/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (setq visual-line-fringe-indicators t)
    (visual-line-mode 1))

  (defun myhooks/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

  (defun my-notes ()
    (expand-file-name
      (concat (if (eq system-type 'windows-nt) (getenv "USERPROFILE") "~") "/Jegyzetek")))

  (use-package org
    :hook (org-mode . myhooks/org-mode-setup)
    :hook (org-mode . myhooks/org-font-setup)
    :init
      (setq org-ellipsis " ▾")
      ;; Hide leading stars
      (setq org-hide-leading-stars nil)

      ;; Org Agenda
      (setq org-agenda-files (list (my-notes)))
  )

  (use-package ox-md)

  (use-package org-contrib)
  (use-package ox-confluence)

  (use-package org-modern
    :after org
    :config
      (with-eval-after-load 'org (global-org-modern-mode))
  )
#+END_SRC

** Visual Fill

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    ;; The visual-fill-column was moved to Codeberg, but it is still archived on Github
    (quelpa
     '(visual-fill-column
       :fetcher github
       :repo "joostkremers/visual-fill-column"))
  )
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-visual-fill-column")))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; Configure Visual Fill
  (defun myhooks/visual-fill-column ()
    (setq visual-fill-column-center-text t
          visual-fill-column-width 80)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . myhooks/visual-fill-column)
    :hook (markdown-mode . myhooks/visual-fill-column)
  )
#+END_SRC

** Denote

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(denote
       :fetcher github
       :repo "protesilaos/denote"))
  )
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-denote")))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package denote
    :init
      ;; Remember to check the doc strings of those variables.
      (setq denote-directory (my-notes))
      (setq denote-known-keywords '())
      (setq denote-infer-keywords t)
      (setq denote-sort-keywords t)
      (setq denote-file-type nil) ; Org is the default, set others here
      (setq denote-prompts '(subdirectory title keywords))
      (setq denote-excluded-directories-regexp nil)
      (setq denote-excluded-keywords-regexp nil)

      ;; Pick dates, where relevant, with Org's advanced interface:
      (setq denote-date-prompt-use-org-read-date t)

      (setq denote-allow-multi-word-keywords t)

      ;; By default, we do not show the context of links.  We just display
      ;; file names.  This provides a more informative view.
      (setq denote-backlinks-show-context t)
  )
#+END_SRC

** Markdown mode

#+BEGIN_SRC elisp :noweb-ref emacs
  (defun myhooks/markdown-mode-setup ()
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (defun myhooks/markdown-font-setup ()
    ;; Set faces for heading levels
    (dolist (face '((markdown-header-face-1 . 1.2)
                    (markdown-header-face-2 . 1.1)
                    (markdown-header-face-3 . 1.05)
                    (markdown-header-face-4 . 1.0)
                    (markdown-header-face-5 . 1.1)
                    (markdown-header-face-6 . 1.1)
                    (markdown-markup-face . 1.0)
                    ))
      (set-face-attribute (car face) nil :font "cantarell" :weight 'regular :height (cdr face)))
    )

  (use-package markdown-mode
    :init
      (add-to-list 'auto-mode-alist
                   '("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . markdown-mode))

      (autoload 'gfm-mode "markdown-mode"
        "Major mode for editing GitHub Flavored Markdown files" t)
      (add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))

      (add-hook 'markdown-mode-hook #'myhooks/markdown-font-setup)
      (add-hook 'markdown-mode-hook #'myhooks/markdown-mode-setup)
      (add-hook 'markdown-mode-hook #'myhooks/visual-fill)
  )
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-markdown-mode")))
#+END_SRC

** YAML mode

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package yaml-mode
    :init
      (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
  )
#+END_SRC

Add the Guix package to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-yaml-mode")))
#+END_SRC

** EMMS

*** Installation

If guix is not installed, then install within Emacs using quelpa:

#+BEGIN_SRC elisp :noweb-ref emacs
  (unless (executable-find "guix")
    (quelpa
     '(emms-setup
       :fetcher github
       :repo "emacsmirror/emms"))
  )
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-emms"
                  "mpv")))
#+END_SRC

*** Configuration

#+BEGIN_SRC elisp :noweb-ref emacs
  ;; EMMS
  (use-package emms-setup
    :init
      (setq emms-player-list '(emms-player-mpv)
            emms-info-functions '(emms-info-native))
    :config
      (emms-all)
  )
#+END_SRC

** Tramp

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package tramp
    :config
      ;; Based on tramp-sh.el https://git.savannah.gnu.org/cgit/tramp.git/tree/lisp/tramp-sh.el
      (add-to-list 'tramp-methods
                   '("mysudo"
                     (tramp-login-program        "env")
                     (tramp-login-args           (("SUDO_PROMPT=P\"\"a\"\"s\"\"s\"\"w\"\"o\"\"r\"\"d\"\":")
                                                  ("sudo") ("su") ("-") ("%u") ))
                     (tramp-remote-shell         "/bin/sh")
                     (tramp-remote-shell-login   ("-l"))
                     (tramp-remote-shell-args    ("-c"))
                     (tramp-connection-timeout   10)
                     (tramp-session-timeout      300)
                     (tramp-password-previous-hop t)))
  )
#+END_SRC

** Disable mouse

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package disable-mouse
    :init
      (global-disable-mouse-mode)

      ;; This code is still unreleased for disable-mouse
      ;;;###autoload
      (defun disable-mouse-in-keymap (map &optional include-targets)
        "Rebind all mouse commands in MAP so that they are disabled.
      When INCLUDE-TARGETS is non-nil, also disable mouse actions that
      target GUI elements such as the modeline."
        (dolist (binding (disable-mouse--all-bindings include-targets))
          (define-key map binding 'disable-mouse--handle)))

      (mapc #'disable-mouse-in-keymap
            (list evil-motion-state-map
                  evil-normal-state-map
                  evil-visual-state-map
                  evil-insert-state-map
                  ))
  )
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-disable-mouse")))
#+END_SRC

** Envrc

#+BEGIN_SRC elisp :noweb-ref emacs
  (use-package envrc
    :init
      (envrc-global-mode)
  )
#+END_SRC

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-envrc"
                  "direnv")))
#+END_SRC

** Various other packages

Add the Guix packages to the home config:

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-packages
    (append %home-packages
            (list "emacs-magit"
                  "emacs-eat"
                  "emacs-vterm")))
#+END_SRC

* Guix config

** Herd service

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-services
    (append %home-services
            (list
             (simple-service 'emacsdaemon
                             home-shepherd-service-type
                             (list (shepherd-service
                                    (provision '(emacs))
                                    (documentation "Run `emacs --daemon'")
                                    (start #~(make-forkexec-constructor
                                              (list #$(file-append emacs "/bin/emacs")
                                                    "--fg-daemon")
                                              #:log-file #$(home-log "emacs")))
                                    (stop #~(make-system-destructor "emacsclient -e '(client-save-kill-emacs)'"))
                                    (respawn? #f)))))))
#+END_SRC

** Symlinking the init.el file

#+BEGIN_SRC scheme :noweb-ref guix-home
  (define %home-services
    (append %home-services
            (list
             (simple-service 'emacs-symlinking-service
                             home-files-service-type
                             `((".config/emacs/init.el"
                                ,(local-file "home/.config/emacs/init.el" "emacs-init")))))))
#+END_SRC
